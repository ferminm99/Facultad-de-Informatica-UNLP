TestCase subclass: #PostTest	instanceVariableNames: 'post1 usu1 usu2 voto1 voto2 voto3 voto4'	classVariableNames: ''	package: 'Objetos2-Tests'!!PostTest methodsFor: 'setUp-tearDown' stamp: 'Huggias 5/16/2020 11:44'!setUp	usu1 := Usuario nombre: 'juan' contrasenia: '123'.	usu2 := Usuario nombre: 'pepe' contrasenia: '234'.	post1 := Post usuario: usu1 texto: 'Que onda los autos?'.	voto1 := Voto usuario: usu1.	voto2 := Voto usuario: usu1.	voto3 := Voto usuario: usu2.	voto4 := Voto usuario: usu2.! !!PostTest methodsFor: 'test' stamp: 'Huggias 5/16/2020 11:45'!testColeccionDeVotos	self assert: (post1 votosNegativos) size equals: 0.	self assert: (post1 votosPositivos) size equals: 0. 	post1 agregarVotoPositivoDe: usu1.	 	self assert: (post1 votosPositivos) size equals: 1.	self assert: (post1 votosNegativos) size equals: 0.	self assert: (post1 votosPositivos anySatisfy: [:voto| (voto usuario) = usu1 ]). 	self assert: (post1 coleccionDeVotos: true) size equals: 1.	self assert: (post1 coleccionDeVotos: false) size equals: 0.! !!PostTest methodsFor: 'test' stamp: 'Huggias 5/8/2020 16:54'!testAgregarAUnaColeccion	|coleccionDeVotos|	coleccionDeVotos := OrderedCollection new.	self assert: (coleccionDeVotos size) equals: 0.	post1 agregar: (Voto usuario: usu1) aUnaColeccion: coleccionDeVotos.	self assert: (coleccionDeVotos size) equals: 1.	post1 agregar: (Voto usuario: usu1) aUnaColeccion: coleccionDeVotos.	self assert: (coleccionDeVotos size) equals: 1.	self assert: (coleccionDeVotos anySatisfy: [:voto | (voto usuario) = usu1]).! !!PostTest methodsFor: 'test' stamp: 'Huggias 5/16/2020 11:48'!testDiferenciaDeLikes	post1 agregarVotoNegativoDe: usu1.	post1 agregarVotoNegativoDe: usu2.	self assert: post1 diferenciaDeLikes equals: -2.	post1 agregarVotoPositivoDe: usu1.	self assert: post1 diferenciaDeLikes equals: 0.	post1 agregarVotoPositivoDe: usu2.	self assert: post1 diferenciaDeLikes equals: 2.! !!PostTest methodsFor: 'test' stamp: 'Huggias 5/16/2020 11:35'!testAgregarVotoPositivoDe	self assert: (post1 votosPositivos ) size equals: 0. 	post1 agregarVotoPositivoDe: usu1.	self assert: (post1 votosPositivos) size equals: 1.	self assert: (post1 votosPositivos anySatisfy: [:voto| (voto usuario) = usu1 ]). 	post1 agregarVotoPositivoDe: usu1.	self assert: (post1 votosPositivos) size equals: 1.	self assert: (post1 votosPositivos anySatisfy: [:voto| (voto usuario) = usu1 ]).! !!PostTest methodsFor: 'test' stamp: 'Huggias 5/16/2020 11:34'!testAgregarVotoNegativoDe	self assert: (post1 votosNegativos) size equals: 0. 	post1 agregarVotoNegativoDe: usu1.	self assert: (post1 votosNegativos) size equals: 1.	self assert: (post1 votosNegativos anySatisfy: [:voto| (voto usuario) = usu1 ]). 	post1 agregarVotoNegativoDe: usu1.	self assert: (post1 votosNegativos) size equals: 1.	self assert: (post1 votosNegativos anySatisfy: [:voto| (voto usuario) = usu1 ]).! !!PostTest methodsFor: 'test' stamp: 'Huggias 5/8/2020 16:59'!testRemoverVotoDeAUnaColeccion	|coleccionDeVotos|	coleccionDeVotos := OrderedCollection new.	self assert: (coleccionDeVotos size) equals: 0.	post1 agregar: (Voto usuario: usu1) aUnaColeccion: coleccionDeVotos.	self assert: (coleccionDeVotos size) equals: 1.	post1 removerVotoDe: usu1 aUnaColeccion: coleccionDeVotos.	 self assert: (coleccionDeVotos size) equals: 0.! !!PostTest methodsFor: 'test' stamp: 'Huggias 5/16/2020 11:44'!testSoyDe	self assert: (post1 soyDe: usu1).	self deny: (post1 soyDe: usu2).! !TestCase subclass: #PreguntaTest	instanceVariableNames: 'pregunta1 respuesta1 respuesta2 respuesta3 usu1 usu2 usu3 voto1 voto2 top1 top2'	classVariableNames: ''	package: 'Objetos2-Tests'!!PreguntaTest commentStamp: '' prior: 0!A PreguntaTest is a test class for testing the behavior of Pregunta!!PreguntaTest methodsFor: 'setUp-tearDown' stamp: 'Huggias 5/8/2020 17:10'!setUp	usu1 := Usuario nombre: 'juan' contrasenia: '123'.	usu2 := Usuario nombre: 'pepe' contrasenia: '234'.	usu3 := Usuario nombre: 'pedro' contrasenia: '345'.	pregunta1 := Pregunta		usuario: usu1		texto: 'Me pregunto que onda los autos'		titulo: 'Que onda los autos?'		topicos: OrderedCollection new.	respuesta1:= Post usuario: usu2 texto: 'estan buenos'.	respuesta2:= Post usuario: usu3 texto: 'no me gustan'.	respuesta3:= Post usuario: usu3 texto: 'nada, probando'.	top1 := Topico nombre: 'autardos' descripcion: 'topico de autos'.	top2 := Topico nombre: 'motardas' descripcion: 'topico de motos'.! !!PreguntaTest methodsFor: 'test' stamp: 'Huggias 5/16/2020 12:19'!testRespuestasOrderByLikes	self assert: pregunta1 respuestas size equals: 0.	pregunta1 agregarRespuesta: respuesta1.	pregunta1 agregarRespuesta: respuesta2.	pregunta1 agregarRespuesta: respuesta3.	self assert: pregunta1 respuestas size equals: 3.	respuesta1 agregarVotoPositivoDe: usu1.	self assert: pregunta1 respuestas first diferenciaDeLikes equals: 1. 	respuesta2 agregarVotoPositivoDe: usu1.	respuesta2 agregarVotoPositivoDe: usu2.	self assert: (pregunta1 respuestas at:2) diferenciaDeLikes equals: 2.	respuesta3 agregarVotoPositivoDe: usu1.	respuesta3 agregarVotoPositivoDe: usu2.	respuesta3 agregarVotoPositivoDe: usu3.	self assert: (pregunta1 respuestas last) diferenciaDeLikes equals: 3.	pregunta1 respuestas shuffle.	self assert: (pregunta1 respuestasOrderByLikes first) texto equals: respuesta3 texto.	self assert: (pregunta1 respuestasOrderByLikes at: 2) texto equals: respuesta2 texto.	self assert: (pregunta1 respuestasOrderByLikes last) texto equals: respuesta1 texto.! !!PreguntaTest methodsFor: 'test' stamp: 'Huggias 5/8/2020 17:13'!testBorrar	self assert: usu1 preguntas size equals: 0.	usu1 agregarPregunta: pregunta1.	self assert: usu1 preguntas size equals: 1.	pregunta1 borrar.	self assert: usu1 preguntas size equals: 0.	! !!PreguntaTest methodsFor: 'test' stamp: 'Huggias 5/8/2020 17:19'!testTengoElTopico	self assert: pregunta1 topicos size equals: 0.	self deny: (pregunta1 topicos anySatisfy: [ :topico | topico = top1 ]).	pregunta1 agregarTopico: top1.	self assert: pregunta1 topicos size equals: 1.	self deny: (pregunta1 topicos anySatisfy: [ :topico | topico = top2 ]).! !!PreguntaTest methodsFor: 'test' stamp: 'Huggias 5/8/2020 17:08'!testAgregarRespuesta	self assert: pregunta1 respuestas isEmpty.	pregunta1 agregarRespuesta: respuesta1.	self assert: pregunta1 respuestas size equals: 1.	self assert: (pregunta1 respuestas anySatisfy: [ :respuesta | respuesta = respuesta1 ]).	pregunta1 agregarRespuesta: respuesta2.	self assert: pregunta1 respuestas size equals: 2.	self assert: (pregunta1 respuestas anySatisfy: [ :respuesta | respuesta = respuesta2 ]).! !!PreguntaTest methodsFor: 'test' stamp: 'Huggias 5/8/2020 17:11'!testAgregarTopico	self assert: pregunta1 topicos size equals: 0.	pregunta1 agregarTopico: top1.	self assert: pregunta1 topicos size equals: 1.	self assert: (pregunta1 topicos anySatisfy: [ :topico | topico = top1 ]).	pregunta1 agregarTopico: top2.	self assert: pregunta1 topicos size equals: 2.	self assert: (pregunta1 topicos anySatisfy: [ :topico | topico = top2 ]).! !!PreguntaTest methodsFor: 'test' stamp: 'Huggias 5/16/2020 11:53'!testRespuestasDelUsuario	|respuestasDelUsuario3 respuestasDelUsuario2|	pregunta1 agregarRespuesta: respuesta1.	pregunta1 agregarRespuesta: respuesta2.	pregunta1 agregarRespuesta: respuesta3.	respuestasDelUsuario3 := pregunta1 respuestasDelUsuario: usu3.	self assert: (respuestasDelUsuario3 size) equals: 2.	self deny: (respuestasDelUsuario3 anySatisfy: [:respuesta | respuesta = respuesta1]).	self assert: (respuestasDelUsuario3 anySatisfy: [:respuesta | respuesta = respuesta2]).	self assert: (respuestasDelUsuario3 anySatisfy: [:respuesta | respuesta = respuesta3]).	respuestasDelUsuario2 := pregunta1 respuestasDelUsuario: usu2.	self assert: (respuestasDelUsuario2 size) equals: 1.	self deny: (respuestasDelUsuario2 anySatisfy: [:respuesta | respuesta = respuesta2]).	self deny: (respuestasDelUsuario2 anySatisfy: [:respuesta | respuesta = respuesta3]).	self assert: (respuestasDelUsuario2 anySatisfy: [:respuesta | respuesta = respuesta1]).! !TestCase subclass: #SistemaTest	instanceVariableNames: 'sistema usu1 usu2 preg1 preg2 preg3 res1 res2 res3 voto1 voto2 top1 top2'	classVariableNames: ''	package: 'Objetos2-Tests'!!SistemaTest commentStamp: '' prior: 0!A SistemaTest is a test class for testing the behavior of Sistema!!SistemaTest methodsFor: 'test' stamp: 'Huggias 4/9/2020 17:13'!testAgregarUsuario	self assert: sistema usuarios size equals: 0.	sistema agregarUsuario: usu1.	sistema agregarUsuario: usu2.	self assert: sistema usuarios size equals: 2.	self assert: (sistema usuarios at: 1) equals: usu1.! !!SistemaTest methodsFor: 'test' stamp: 'Huggias 5/16/2020 12:17'!testUltimasPreguntasRelevantesDe	"""  Se redefiniran las preguntas para controlar las fechas de creacion de las mismas  """	preg1 := Pregunta		usuario: usu1		texto: 'me pregunto como andan las motos'		titulo: 'Que onda las motos?'		topicos: OrderedCollection new.	(Delay forSeconds: 1) wait.	preg2 := Pregunta		usuario: usu2		texto: 'me pregunto como andan los autos'		titulo: 'Que onda las autos?'		topicos: OrderedCollection new.	(Delay forSeconds: 1) wait.	preg3 := Pregunta		usuario: usu2		texto: 'me pregunto como andan los autos'		titulo: 'probando'		topicos: OrderedCollection new.	sistema agregarTopico: top1.	sistema agregarTopico: top2.	sistema agregarUsuario: usu1.	sistema agregarUsuario: usu2.	usu1 seguir: usu2.	usu1 agregarTopicoInteres: top1.	preg2 agregarTopico: top1.	usu2 agregarPregunta: preg2.	self assert: (sistema ultimasPreguntasRelevantesDe: usu1 )size equals: 1.	self assert: ((sistema ultimasPreguntasRelevantesDe: usu1 )anySatisfy: [ :pregunta | pregunta = preg2 ]).	usu1 agregarPregunta: preg1.	preg1 agregarTopico: top2.	self assert: (sistema ultimasPreguntasRelevantesDe: usu1 )size equals: 1.	preg1 agregarTopico: top1.	self assert: (sistema ultimasPreguntasRelevantesDe: usu1 )size equals: 2.	self assert: ((sistema ultimasPreguntasRelevantesDe: usu1 )anySatisfy: [ :pregunta | pregunta = preg1 ]).	usu2 agregarPregunta: preg3.	preg3 agregarTopico: top2. 	self assert: (sistema ultimasPreguntasRelevantesDe: usu1 )size equals: 3.	self assert: ((sistema ultimasPreguntasRelevantesDe: usu1 )anySatisfy: [ :pregunta | pregunta = preg3 ]).	self assert: (((sistema ultimasPreguntasRelevantesDe: usu1) first) titulo) equals: preg3 titulo .		self assert: (((sistema ultimasPreguntasRelevantesDe: usu1) last) titulo) equals: preg1 titulo .! !!SistemaTest methodsFor: 'test' stamp: 'Huggias 5/8/2020 14:01'!testValidarPassword	| usuTest val |	sistema agregarUsuario: usu1.	sistema agregarUsuario: usu2.	usuTest := sistema validar: 'juan' password: '123'.	self assert: (usuTest compareTo: usu1 nombre password: usu1 contrasenia).	usuTest := sistema validar: 'juan' password: '1234'.	val := false.	usuTest ifNotNil: [ 		val := true.		 ].	self deny: val.! !!SistemaTest methodsFor: 'test' stamp: 'Huggias 4/9/2020 17:13'!testAgregarTopico	self assert: sistema topicos size equals: 0.	sistema agregarTopico: top1.	sistema agregarTopico: top2.	self assert: sistema topicos size equals: 2.	self assert: (sistema topicos at: 2) equals: top2.! !!SistemaTest methodsFor: 'test' stamp: 'Huggias 5/8/2020 17:51'!testPreguntasDeUnTopico	sistema agregarUsuario: usu1.	usu1 agregarPregunta: preg1.	usu1 agregarPregunta: preg2.	self assert: (sistema preguntasDeUnTopico: top1) size equals: 0.	preg1 agregarTopico: top1.	self assert: (sistema preguntasDeUnTopico: top1) size equals: 1.	self assert: ((sistema preguntasDeUnTopico: top1)anySatisfy: [:pregunta|pregunta=preg1]).	preg2 agregarTopico: top1.	self assert: (sistema preguntasDeUnTopico: top1) size equals: 2.	self assert: ((sistema preguntasDeUnTopico: top1)anySatisfy: [:pregunta|pregunta=preg2]).! !!SistemaTest methodsFor: 'setUp-tearDown' stamp: 'Huggias 5/8/2020 14:00'!setUp	sistema := Sistema new.	usu1 := Usuario nombre: 'juan' contrasenia: '123'.	usu2 := Usuario nombre: 'pepe' contrasenia: '234'.	preg1 := Pregunta		usuario: usu1		texto: 'me pregunto como andan las motos'		titulo: 'Que onda las motos?'		topicos: OrderedCollection new.	preg2 := Pregunta		usuario: usu2		texto: 'me pregunto como andan los autos'		titulo: 'Que onda las autos?'		topicos: OrderedCollection new.	res1 := Post usuario: usu2 texto: 'A mi me gustan las motos'.	res2 := Post usuario: usu1 texto: 'A mi los autos me gustan'.	res3 := Post usuario: usu2 texto: 'A mi los autos tambien me gustan'.	voto1 := Voto usuario: usu1.	voto2 := Voto usuario: usu2.	top1 := Topico nombre: 'autardos' descripcion: 'topico de autos'.	top2 := Topico nombre: 'motardas' descripcion: 'topico de motos'! !TestCase subclass: #UsuarioTest	instanceVariableNames: 'sistema usu1 usu2 preg1 preg2 res1 res2 voto1 voto2 top1 top2 res3 preg3'	classVariableNames: ''	package: 'Objetos2-Tests'!!UsuarioTest commentStamp: '' prior: 0!An UsuarioTest is a test class for testing the behavior of Usuario!!UsuarioTest methodsFor: 'test'!testBorrarPregunta	usu1 borrarPregunta: preg1.	self assert: usu1 preguntas size equals: 0.	usu1 agregarPregunta: preg1.	usu1 agregarPregunta: preg2.	self assert: usu1 preguntas size equals: 2.	usu1 borrarPregunta: preg1.	self assert: usu1 preguntas size equals: 1.! !!UsuarioTest methodsFor: 'test' stamp: 'Huggias 5/8/2020 17:45'!testPreguntasConElTopico	preg1 agregarTopico: top1.	preg2 agregarTopico: top1.	usu1 agregarPregunta: preg1.	usu1 agregarPregunta: preg2.	self assert: (preg1 topicos anySatisfy: [ :topico | topico = top1 ]).	self assert: (preg2 topicos anySatisfy: [ :topico | topico = top1 ]).	self assert: (usu1 preguntasConElTopico: top1) size equals:2.	self assert: ((usu1 preguntasConElTopico: top1) anySatisfy: [ :pregunta | pregunta = preg1 ]).	self assert: ((usu1 preguntasConElTopico: top1) anySatisfy: [ :pregunta | pregunta = preg2 ]).	self assert: (usu1 preguntasConElTopico: top2) size equals:0.! !!UsuarioTest methodsFor: 'test'!testCompareToPassword	self assert: (usu1 compareTo: 'juan' password: '123').	self deny: (usu1 compareTo: 'juan' password: '1234').! !!UsuarioTest methodsFor: 'test'!testAgregarPregunta	self assert: usu1 preguntas size equals: 0.	usu1 agregarPregunta: preg1.	self assert: usu1 preguntas size equals: 1! !!UsuarioTest methodsFor: 'test' stamp: 'Huggias 5/16/2020 12:05'!testUltimasPreguntasRelevantes	"""  Se redefiniran las preguntas para controlar las fechas de creacion de las mismas  """	preg1 := Pregunta		usuario: usu1		texto: 'me pregunto como andan las motos'		titulo: 'Que onda las motos?'		topicos: OrderedCollection new.	(Delay forSeconds: 1) wait.	preg2 := Pregunta		usuario: usu2		texto: 'me pregunto como andan los autos'		titulo: 'Que onda las autos?'		topicos: OrderedCollection new.	(Delay forSeconds: 1) wait.	preg3 := Pregunta		usuario: usu2		texto: 'me pregunto como andan los autos'		titulo: 'probando'		topicos: OrderedCollection new.	usu1 seguir: usu2.	usu1 agregarTopicoInteres: top1.	preg2 agregarTopico: top1.	usu2 agregarPregunta: preg2.	self assert: (sistema ultimasPreguntasRelevantesDe: usu1 )size equals: 1.	self assert: ((sistema ultimasPreguntasRelevantesDe: usu1 )anySatisfy: [ :pregunta | pregunta = preg2 ]).	usu1 agregarPregunta: preg1.	preg1 agregarTopico: top2.	self assert: (sistema ultimasPreguntasRelevantesDe: usu1 )size equals: 1.	preg1 agregarTopico: top1.	self assert: (sistema ultimasPreguntasRelevantesDe: usu1 )size equals: 2.	self assert: ((sistema ultimasPreguntasRelevantesDe: usu1 )anySatisfy: [ :pregunta | pregunta = preg1 ]).	usu2 agregarPregunta: preg3.	preg3 agregarTopico: top2. 	self assert: (sistema ultimasPreguntasRelevantesDe: usu1 )size equals: 3.	self assert: ((sistema ultimasPreguntasRelevantesDe: usu1 )anySatisfy: [ :pregunta | pregunta = preg3 ]).		self assert: (((sistema ultimasPreguntasRelevantesDe: usu1) first) titulo) equals: preg3 titulo .		self assert: (((sistema ultimasPreguntasRelevantesDe: usu1) last) titulo) equals: preg1 titulo .! !!UsuarioTest methodsFor: 'test'!testBorrarRespuesta	usu1 borrarRespuesta: res1.	self assert: usu1 respuestas size equals: 0.	usu1 agregarRespuesta: res1.	usu1 agregarRespuesta: res2.	self assert: usu1 respuestas size equals: 2.	usu1 borrarRespuesta: res2.	self assert: usu1 respuestas size equals: 1.! !!UsuarioTest methodsFor: 'test' stamp: 'Huggias 5/8/2020 18:46'!testMisRespuestasDeMisPreguntas	usu1 agregarPregunta: preg1.	preg1 agregarRespuesta: res1.	self assert: usu1 misRespuestasDeMisPreguntas size equals: 0.	preg1 agregarRespuesta: res2.	self assert: usu1 misRespuestasDeMisPreguntas size equals: 1.	self assert: (usu1 misRespuestasDeMisPreguntas anySatisfy: [ :respuesta | respuesta = res2]).! !!UsuarioTest methodsFor: 'test' stamp: 'Huggias 5/16/2020 12:22'!testPuntajeDeLikes	self assert: usu1 puntajeDeLikes equals: 0.	res2 agregarVotoPositivoDe: usu1.	res2 agregarVotoPositivoDe: usu2.	usu1 agregarPregunta: preg1.	preg1 agregarRespuesta: res2.	self assert: usu1 puntajeDeLikes equals: 2.	preg1 agregarVotoNegativoDe: usu2. 	self assert: usu1 puntajeDeLikes equals: 1.! !!UsuarioTest methodsFor: 'test'!testAgregarRespuesta	self assert: usu1 respuestas size equals: 0.	usu1 agregarRespuesta: res1.	self assert: usu1 respuestas size equals: 1! !!UsuarioTest methodsFor: 'test' stamp: 'Huggias 5/16/2020 12:21'!testCalcularPuntaje	self assert: usu1 calcularPuntaje equals: 0.	usu1 agregarPregunta: preg1.	self assert: usu1 calcularPuntaje equals: 20.	preg1 agregarRespuesta: res2.	self assert: usu1 calcularPuntaje equals: 20.	usu2 agregarPregunta: preg2.	preg2 agregarRespuesta: res1.	self assert: usu1 calcularPuntaje equals: 20.	preg2 agregarRespuesta: res3.	self assert: usu1 calcularPuntaje equals: 70.	res3 agregarVotoPositivoDe: usu2.	 	self assert: usu1 calcularPuntaje equals: 71.	preg1 agregarVotoPositivoDe: usu2.	preg1 agregarVotoPositivoDe: usu1. 	self assert: usu1 calcularPuntaje equals: 73. 	res2 agregarVotoNegativoDe: usu2.	self assert: usu1 calcularPuntaje equals: 72.	! !!UsuarioTest methodsFor: 'test'!testSeguir	self assert: usu1 seguidos size equals: 0.	usu1 seguir: usu2.	self assert: usu1 seguidos size equals: 1.! !!UsuarioTest methodsFor: 'test'!testAgregarTopicoInteres	self assert: usu1 topicos size equals: 0.	usu1 agregarTopicoInteres: top1.	self assert: (usu1 topicos at: 1) equals: top1. ! !!UsuarioTest methodsFor: 'test' stamp: 'Huggias 4/9/2020 17:56'!testDejarDeSeguir	self assert: usu1 seguidos size equals: 0.	usu1 seguir: usu2.	self assert: usu1 seguidos size equals: 1.	usu1 dejarDeSeguir: usu2.	self assert: usu1 seguidos size equals: 0.	usu1 dejarDeSeguir: usu2.	self assert: usu1 seguidos size equals: 0.! !!UsuarioTest methodsFor: 'test' stamp: 'Huggias 5/8/2020 18:32'!testPreguntasDeMisSeguidos	| preguntasSeguidos |.	usu2 agregarPregunta: preg2.	usu1 seguir: usu2.	preguntasSeguidos := usu1 preguntasDeMisSeguidos .	self assert: (preguntasSeguidos size) equals: 1.	self assert: (preguntasSeguidos anySatisfy: [:pregunta | pregunta=preg2]).	usu2 agregarPregunta: preg3.	preguntasSeguidos := usu1 preguntasDeMisSeguidos .	self assert: (preguntasSeguidos size) equals: 2.	self assert: (preguntasSeguidos anySatisfy: [:pregunta | pregunta=preg3]).! !!UsuarioTest methodsFor: 'test' stamp: 'Huggias 5/16/2020 12:02'!testPreguntasDeMisTopicos	| preguntasTopicos  |	usu1 agregarPregunta: preg1.	preg1 agregarTopico: top1.	usu1 agregarTopicoInteres: top1.	preguntasTopicos := usu1 preguntasDeMisTopicos: sistema.	self assert: (preguntasTopicos size) equals: 1.	self assert: (preguntasTopicos anySatisfy: [:pregunta | pregunta = preg1]).	sistema agregarUsuario: usu2.	usu2 agregarPregunta: preg2.	preg2 agregarTopico: top2.	usu1 agregarTopicoInteres: top2.	preguntasTopicos := usu1 preguntasDeMisTopicos: sistema.	self assert: (preguntasTopicos size) equals: 2.	self assert: (preguntasTopicos anySatisfy: [:pregunta | pregunta = preg2]).	preg2 agregarTopico: top1.	preguntasTopicos := usu1 preguntasDeMisTopicos: sistema.	self assert: (preguntasTopicos size) equals: 2.! !!UsuarioTest methodsFor: 'test' stamp: 'Huggias 5/16/2020 12:03'!testPreguntasInteres	usu1 seguir: usu2.	usu1 agregarTopicoInteres: top1.	preg2 agregarTopico: top1.	usu2 agregarPregunta: preg2.	self assert: (usu1 preguntasInteres:sistema )size equals: 1.	self assert: ((usu1 preguntasInteres:sistema )anySatisfy: [ :pregunta | pregunta = preg2 ]).	usu1 agregarPregunta: preg1.	preg1 agregarTopico: top2.	self assert: (usu1 preguntasInteres:sistema )size equals: 1.	preg1 agregarTopico: top1.	self assert: (usu1 preguntasInteres:sistema )size equals: 2.	self assert: ((usu1 preguntasInteres:sistema )anySatisfy: [ :pregunta | pregunta = preg1 ]).	usu2 agregarPregunta: preg3.	preg3 agregarTopico: top2. 	self assert: (usu1 preguntasInteres:sistema )size equals: 3.	self assert: ((usu1 preguntasInteres:sistema )anySatisfy: [ :pregunta | pregunta = preg3 ]).! !!UsuarioTest methodsFor: 'setUp-tearDown' stamp: 'Huggias 5/8/2020 18:54'!setUp	sistema := Sistema soleInstance.	usu1 := Usuario nombre: 'juan' contrasenia: '123'.	usu2 := Usuario nombre: 'pepe' contrasenia: '234'.	preg1 := Pregunta		usuario: usu1		texto: 'me pregunto como andan las motos'		titulo: 'Que onda las motos?'		topicos: OrderedCollection new.	preg2 := Pregunta		usuario: usu2		texto: 'me pregunto como andan los autos'		titulo: 'Que onda las autos?'		topicos: OrderedCollection new.	preg3 := Pregunta		usuario: usu2		texto: 'me pregunto como andan los autos'		titulo: 'probando'		topicos: OrderedCollection new.	res1 := Post  usuario: usu2 texto: 'A mi me gustan las motos'.	res2 := Post usuario: usu1 texto: 'A mi los autos me gustan'.	res3 := Post usuario: usu1 texto: 'A mi los autos me gustan'.	top1 := Topico nombre: 'autardos' descripcion: 'topico de autos'.	top2 := Topico nombre: 'motardas' descripcion: 'topico de motos'.	sistema agregarTopico: top1.	sistema agregarTopico: top2.	sistema agregarUsuario: usu1.	sistema agregarUsuario: usu2.! !