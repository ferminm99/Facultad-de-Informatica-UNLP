Object subclass: #CuooraSampleLoader	instanceVariableNames: ''	classVariableNames: ''	package: 'Objetos2-Samples'!!CuooraSampleLoader commentStamp: 'Huggias 4/9/2020 11:46' prior: 0!|application|Sistema clearSoleInstance.CuooraSampleLoader setSoleInstance: Sistema soleInstance. application := WAAdmin register: Login asApplicationAt:'login'.application sessionClass: SessionWithUser!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CuooraSampleLoader class	instanceVariableNames: ''!!CuooraSampleLoader class methodsFor: 'accesing' stamp: 'Huggias 5/9/2020 08:42'!setSoleInstance: cuoora	|pedro diego juan preguntaPedro topicosPreguntaPedro preguntaDiego topicosPreguntaDiego topOO1 topTestUnidad topSmalltalk resDiegoToPregPedro resPedroToPregDiego|	"creacion de usuarios"	pedro := Usuario nombre: 'pedro@cuoora.com' contrasenia: 'pedro@cuoora.com'.	diego := Usuario nombre: 'diego@cuoora.com' contrasenia: 'diego@cuoora.com'.	juan := Usuario nombre: 'juan@cuoora.com' contrasenia: 'juan@cuoora.com'.	"Agregar usuarios"	cuoora agregarUsuario: pedro. 	cuoora agregarUsuario: diego. 	cuoora agregarUsuario: juan.	"Relacion entre usuarios"	juan seguir: diego. pedro seguir: juan.	"creacion de topicos"	topOO1 := Topico nombre: 'OO1' descripcion: 'Programacion orientada a objetos'.	topTestUnidad := Topico nombre: 'Test de unidad' descripcion: 'Unit testing'.	topSmalltalk := Topico nombre: 'Smalltalk' descripcion: 'Programacion en Smalltalk'.	"agregar topicos al sistema"	cuoora agregarTopico: topOO1. cuoora agregarTopico: topTestUnidad. cuoora agregarTopico: topSmalltalk.	"Creacion de preguntas"	topicosPreguntaPedro := OrderedCollection new. topicosPreguntaPedro add: topOO1. topicosPreguntaPedro add: topTestUnidad.	preguntaPedro := Pregunta		usuario: pedro		texto: 'Me pregunto para que sirve el metodo SetUp'		titulo: '¿Para qué sirve el método SetUp?'		topicos: topicosPreguntaPedro.		"a la pregunta de diego le ponemos delay para que se considere la mas nueva"	(Delay forSeconds: 1) wait.	topicosPreguntaDiego := OrderedCollection new. topicosPreguntaDiego add: topOO1. topicosPreguntaDiego add: topSmalltalk.	preguntaDiego := Pregunta		usuario: diego		texto: 'No se que significa este mensaje'		titulo: '¿Qué significa #messageNotUnderstood?'		topicos: topicosPreguntaDiego.		"Agregar preguntas al sistema"	diego agregarPregunta: preguntaDiego.	pedro agregarPregunta: preguntaPedro.		"Creacion de respuestas"	resDiegoToPregPedro :=  Post usuario: diego texto: 'Sirve para instanciar los objetos que son evaluados por el test en un único método y que se ejecute siempre antes de cada test'.	resPedroToPregDiego := Post usuario: pedro texto: 'Significa que el objeto que recibió el mensaje no encontró ningún método para ejecutar en respuesta'.	"Agregar respuestas a preguntas"	preguntaPedro agregarRespuesta: resDiegoToPregPedro.	preguntaDiego agregarRespuesta: resPedroToPregDiego.		""" mis pruebas """	juan agregarTopicoInteres: topOO1 .! !TestCase subclass: #PostTest	instanceVariableNames: 'post1 usu1 usu2 voto1 voto2 voto3 voto4'	classVariableNames: ''	package: 'Objetos2-Tests'!!PostTest methodsFor: 'setUp-tearDown' stamp: 'Huggias 5/16/2020 11:44'!setUp	usu1 := Usuario nombre: 'juan' contrasenia: '123'.	usu2 := Usuario nombre: 'pepe' contrasenia: '234'.	post1 := Post usuario: usu1 texto: 'Que onda los autos?'.	voto1 := Voto usuario: usu1.	voto2 := Voto usuario: usu1.	voto3 := Voto usuario: usu2.	voto4 := Voto usuario: usu2.! !!PostTest methodsFor: 'test' stamp: 'Huggias 5/16/2020 11:45'!testColeccionDeVotos	self assert: (post1 votosNegativos) size equals: 0.	self assert: (post1 votosPositivos) size equals: 0. 	post1 agregarVotoPositivoDe: usu1.	 	self assert: (post1 votosPositivos) size equals: 1.	self assert: (post1 votosNegativos) size equals: 0.	self assert: (post1 votosPositivos anySatisfy: [:voto| (voto usuario) = usu1 ]). 	self assert: (post1 coleccionDeVotos: true) size equals: 1.	self assert: (post1 coleccionDeVotos: false) size equals: 0.! !!PostTest methodsFor: 'test' stamp: 'Huggias 5/8/2020 16:54'!testAgregarAUnaColeccion	|coleccionDeVotos|	coleccionDeVotos := OrderedCollection new.	self assert: (coleccionDeVotos size) equals: 0.	post1 agregar: (Voto usuario: usu1) aUnaColeccion: coleccionDeVotos.	self assert: (coleccionDeVotos size) equals: 1.	post1 agregar: (Voto usuario: usu1) aUnaColeccion: coleccionDeVotos.	self assert: (coleccionDeVotos size) equals: 1.	self assert: (coleccionDeVotos anySatisfy: [:voto | (voto usuario) = usu1]).! !!PostTest methodsFor: 'test' stamp: 'Huggias 5/16/2020 11:48'!testDiferenciaDeLikes	post1 agregarVotoNegativoDe: usu1.	post1 agregarVotoNegativoDe: usu2.	self assert: post1 diferenciaDeLikes equals: -2.	post1 agregarVotoPositivoDe: usu1.	self assert: post1 diferenciaDeLikes equals: 0.	post1 agregarVotoPositivoDe: usu2.	self assert: post1 diferenciaDeLikes equals: 2.! !!PostTest methodsFor: 'test' stamp: 'Huggias 5/16/2020 11:35'!testAgregarVotoPositivoDe	self assert: (post1 votosPositivos ) size equals: 0. 	post1 agregarVotoPositivoDe: usu1.	self assert: (post1 votosPositivos) size equals: 1.	self assert: (post1 votosPositivos anySatisfy: [:voto| (voto usuario) = usu1 ]). 	post1 agregarVotoPositivoDe: usu1.	self assert: (post1 votosPositivos) size equals: 1.	self assert: (post1 votosPositivos anySatisfy: [:voto| (voto usuario) = usu1 ]).! !!PostTest methodsFor: 'test' stamp: 'Huggias 5/16/2020 11:34'!testAgregarVotoNegativoDe	self assert: (post1 votosNegativos) size equals: 0. 	post1 agregarVotoNegativoDe: usu1.	self assert: (post1 votosNegativos) size equals: 1.	self assert: (post1 votosNegativos anySatisfy: [:voto| (voto usuario) = usu1 ]). 	post1 agregarVotoNegativoDe: usu1.	self assert: (post1 votosNegativos) size equals: 1.	self assert: (post1 votosNegativos anySatisfy: [:voto| (voto usuario) = usu1 ]).! !!PostTest methodsFor: 'test' stamp: 'Huggias 5/8/2020 16:59'!testRemoverVotoDeAUnaColeccion	|coleccionDeVotos|	coleccionDeVotos := OrderedCollection new.	self assert: (coleccionDeVotos size) equals: 0.	post1 agregar: (Voto usuario: usu1) aUnaColeccion: coleccionDeVotos.	self assert: (coleccionDeVotos size) equals: 1.	post1 removerVotoDe: usu1 aUnaColeccion: coleccionDeVotos.	 self assert: (coleccionDeVotos size) equals: 0.! !!PostTest methodsFor: 'test' stamp: 'Huggias 5/16/2020 11:44'!testSoyDe	self assert: (post1 soyDe: usu1).	self deny: (post1 soyDe: usu2).! !TestCase subclass: #PreguntaTest	instanceVariableNames: 'pregunta1 respuesta1 respuesta2 respuesta3 usu1 usu2 usu3 voto1 voto2 top1 top2'	classVariableNames: ''	package: 'Objetos2-Tests'!!PreguntaTest commentStamp: '' prior: 0!A PreguntaTest is a test class for testing the behavior of Pregunta!!PreguntaTest methodsFor: 'setUp-tearDown' stamp: 'Huggias 5/8/2020 17:10'!setUp	usu1 := Usuario nombre: 'juan' contrasenia: '123'.	usu2 := Usuario nombre: 'pepe' contrasenia: '234'.	usu3 := Usuario nombre: 'pedro' contrasenia: '345'.	pregunta1 := Pregunta		usuario: usu1		texto: 'Me pregunto que onda los autos'		titulo: 'Que onda los autos?'		topicos: OrderedCollection new.	respuesta1:= Post usuario: usu2 texto: 'estan buenos'.	respuesta2:= Post usuario: usu3 texto: 'no me gustan'.	respuesta3:= Post usuario: usu3 texto: 'nada, probando'.	top1 := Topico nombre: 'autardos' descripcion: 'topico de autos'.	top2 := Topico nombre: 'motardas' descripcion: 'topico de motos'.! !!PreguntaTest methodsFor: 'test' stamp: 'Huggias 5/16/2020 12:19'!testRespuestasOrderByLikes	self assert: pregunta1 respuestas size equals: 0.	pregunta1 agregarRespuesta: respuesta1.	pregunta1 agregarRespuesta: respuesta2.	pregunta1 agregarRespuesta: respuesta3.	self assert: pregunta1 respuestas size equals: 3.	respuesta1 agregarVotoPositivoDe: usu1.	self assert: pregunta1 respuestas first diferenciaDeLikes equals: 1. 	respuesta2 agregarVotoPositivoDe: usu1.	respuesta2 agregarVotoPositivoDe: usu2.	self assert: (pregunta1 respuestas at:2) diferenciaDeLikes equals: 2.	respuesta3 agregarVotoPositivoDe: usu1.	respuesta3 agregarVotoPositivoDe: usu2.	respuesta3 agregarVotoPositivoDe: usu3.	self assert: (pregunta1 respuestas last) diferenciaDeLikes equals: 3.	pregunta1 respuestas shuffle.	self assert: (pregunta1 respuestasOrderByLikes first) texto equals: respuesta3 texto.	self assert: (pregunta1 respuestasOrderByLikes at: 2) texto equals: respuesta2 texto.	self assert: (pregunta1 respuestasOrderByLikes last) texto equals: respuesta1 texto.! !!PreguntaTest methodsFor: 'test' stamp: 'Huggias 5/8/2020 17:13'!testBorrar	self assert: usu1 preguntas size equals: 0.	usu1 agregarPregunta: pregunta1.	self assert: usu1 preguntas size equals: 1.	pregunta1 borrar.	self assert: usu1 preguntas size equals: 0.	! !!PreguntaTest methodsFor: 'test' stamp: 'Huggias 5/8/2020 17:19'!testTengoElTopico	self assert: pregunta1 topicos size equals: 0.	self deny: (pregunta1 topicos anySatisfy: [ :topico | topico = top1 ]).	pregunta1 agregarTopico: top1.	self assert: pregunta1 topicos size equals: 1.	self deny: (pregunta1 topicos anySatisfy: [ :topico | topico = top2 ]).! !!PreguntaTest methodsFor: 'test' stamp: 'Huggias 5/8/2020 17:08'!testAgregarRespuesta	self assert: pregunta1 respuestas isEmpty.	pregunta1 agregarRespuesta: respuesta1.	self assert: pregunta1 respuestas size equals: 1.	self assert: (pregunta1 respuestas anySatisfy: [ :respuesta | respuesta = respuesta1 ]).	pregunta1 agregarRespuesta: respuesta2.	self assert: pregunta1 respuestas size equals: 2.	self assert: (pregunta1 respuestas anySatisfy: [ :respuesta | respuesta = respuesta2 ]).! !!PreguntaTest methodsFor: 'test' stamp: 'Huggias 5/8/2020 17:11'!testAgregarTopico	self assert: pregunta1 topicos size equals: 0.	pregunta1 agregarTopico: top1.	self assert: pregunta1 topicos size equals: 1.	self assert: (pregunta1 topicos anySatisfy: [ :topico | topico = top1 ]).	pregunta1 agregarTopico: top2.	self assert: pregunta1 topicos size equals: 2.	self assert: (pregunta1 topicos anySatisfy: [ :topico | topico = top2 ]).! !!PreguntaTest methodsFor: 'test' stamp: 'Huggias 5/16/2020 11:53'!testRespuestasDelUsuario	|respuestasDelUsuario3 respuestasDelUsuario2|	pregunta1 agregarRespuesta: respuesta1.	pregunta1 agregarRespuesta: respuesta2.	pregunta1 agregarRespuesta: respuesta3.	respuestasDelUsuario3 := pregunta1 respuestasDelUsuario: usu3.	self assert: (respuestasDelUsuario3 size) equals: 2.	self deny: (respuestasDelUsuario3 anySatisfy: [:respuesta | respuesta = respuesta1]).	self assert: (respuestasDelUsuario3 anySatisfy: [:respuesta | respuesta = respuesta2]).	self assert: (respuestasDelUsuario3 anySatisfy: [:respuesta | respuesta = respuesta3]).	respuestasDelUsuario2 := pregunta1 respuestasDelUsuario: usu2.	self assert: (respuestasDelUsuario2 size) equals: 1.	self deny: (respuestasDelUsuario2 anySatisfy: [:respuesta | respuesta = respuesta2]).	self deny: (respuestasDelUsuario2 anySatisfy: [:respuesta | respuesta = respuesta3]).	self assert: (respuestasDelUsuario2 anySatisfy: [:respuesta | respuesta = respuesta1]).! !TestCase subclass: #SistemaTest	instanceVariableNames: 'sistema usu1 usu2 preg1 preg2 preg3 res1 res2 res3 voto1 voto2 top1 top2'	classVariableNames: ''	package: 'Objetos2-Tests'!!SistemaTest commentStamp: '' prior: 0!A SistemaTest is a test class for testing the behavior of Sistema!!SistemaTest methodsFor: 'test' stamp: 'Huggias 4/9/2020 17:13'!testAgregarUsuario	self assert: sistema usuarios size equals: 0.	sistema agregarUsuario: usu1.	sistema agregarUsuario: usu2.	self assert: sistema usuarios size equals: 2.	self assert: (sistema usuarios at: 1) equals: usu1.! !!SistemaTest methodsFor: 'test' stamp: 'Huggias 5/16/2020 12:17'!testUltimasPreguntasRelevantesDe	"""  Se redefiniran las preguntas para controlar las fechas de creacion de las mismas  """	preg1 := Pregunta		usuario: usu1		texto: 'me pregunto como andan las motos'		titulo: 'Que onda las motos?'		topicos: OrderedCollection new.	(Delay forSeconds: 1) wait.	preg2 := Pregunta		usuario: usu2		texto: 'me pregunto como andan los autos'		titulo: 'Que onda las autos?'		topicos: OrderedCollection new.	(Delay forSeconds: 1) wait.	preg3 := Pregunta		usuario: usu2		texto: 'me pregunto como andan los autos'		titulo: 'probando'		topicos: OrderedCollection new.	sistema agregarTopico: top1.	sistema agregarTopico: top2.	sistema agregarUsuario: usu1.	sistema agregarUsuario: usu2.	usu1 seguir: usu2.	usu1 agregarTopicoInteres: top1.	preg2 agregarTopico: top1.	usu2 agregarPregunta: preg2.	self assert: (sistema ultimasPreguntasRelevantesDe: usu1 )size equals: 1.	self assert: ((sistema ultimasPreguntasRelevantesDe: usu1 )anySatisfy: [ :pregunta | pregunta = preg2 ]).	usu1 agregarPregunta: preg1.	preg1 agregarTopico: top2.	self assert: (sistema ultimasPreguntasRelevantesDe: usu1 )size equals: 1.	preg1 agregarTopico: top1.	self assert: (sistema ultimasPreguntasRelevantesDe: usu1 )size equals: 2.	self assert: ((sistema ultimasPreguntasRelevantesDe: usu1 )anySatisfy: [ :pregunta | pregunta = preg1 ]).	usu2 agregarPregunta: preg3.	preg3 agregarTopico: top2. 	self assert: (sistema ultimasPreguntasRelevantesDe: usu1 )size equals: 3.	self assert: ((sistema ultimasPreguntasRelevantesDe: usu1 )anySatisfy: [ :pregunta | pregunta = preg3 ]).	self assert: (((sistema ultimasPreguntasRelevantesDe: usu1) first) titulo) equals: preg3 titulo .		self assert: (((sistema ultimasPreguntasRelevantesDe: usu1) last) titulo) equals: preg1 titulo .! !!SistemaTest methodsFor: 'test' stamp: 'Huggias 5/8/2020 14:01'!testValidarPassword	| usuTest val |	sistema agregarUsuario: usu1.	sistema agregarUsuario: usu2.	usuTest := sistema validar: 'juan' password: '123'.	self assert: (usuTest compareTo: usu1 nombre password: usu1 contrasenia).	usuTest := sistema validar: 'juan' password: '1234'.	val := false.	usuTest ifNotNil: [ 		val := true.		 ].	self deny: val.! !!SistemaTest methodsFor: 'test' stamp: 'Huggias 4/9/2020 17:13'!testAgregarTopico	self assert: sistema topicos size equals: 0.	sistema agregarTopico: top1.	sistema agregarTopico: top2.	self assert: sistema topicos size equals: 2.	self assert: (sistema topicos at: 2) equals: top2.! !!SistemaTest methodsFor: 'test' stamp: 'Huggias 5/8/2020 17:51'!testPreguntasDeUnTopico	sistema agregarUsuario: usu1.	usu1 agregarPregunta: preg1.	usu1 agregarPregunta: preg2.	self assert: (sistema preguntasDeUnTopico: top1) size equals: 0.	preg1 agregarTopico: top1.	self assert: (sistema preguntasDeUnTopico: top1) size equals: 1.	self assert: ((sistema preguntasDeUnTopico: top1)anySatisfy: [:pregunta|pregunta=preg1]).	preg2 agregarTopico: top1.	self assert: (sistema preguntasDeUnTopico: top1) size equals: 2.	self assert: ((sistema preguntasDeUnTopico: top1)anySatisfy: [:pregunta|pregunta=preg2]).! !!SistemaTest methodsFor: 'setUp-tearDown' stamp: 'Huggias 5/8/2020 14:00'!setUp	sistema := Sistema new.	usu1 := Usuario nombre: 'juan' contrasenia: '123'.	usu2 := Usuario nombre: 'pepe' contrasenia: '234'.	preg1 := Pregunta		usuario: usu1		texto: 'me pregunto como andan las motos'		titulo: 'Que onda las motos?'		topicos: OrderedCollection new.	preg2 := Pregunta		usuario: usu2		texto: 'me pregunto como andan los autos'		titulo: 'Que onda las autos?'		topicos: OrderedCollection new.	res1 := Post usuario: usu2 texto: 'A mi me gustan las motos'.	res2 := Post usuario: usu1 texto: 'A mi los autos me gustan'.	res3 := Post usuario: usu2 texto: 'A mi los autos tambien me gustan'.	voto1 := Voto usuario: usu1.	voto2 := Voto usuario: usu2.	top1 := Topico nombre: 'autardos' descripcion: 'topico de autos'.	top2 := Topico nombre: 'motardas' descripcion: 'topico de motos'! !TestCase subclass: #UsuarioTest	instanceVariableNames: 'sistema usu1 usu2 preg1 preg2 res1 res2 voto1 voto2 top1 top2 res3 preg3'	classVariableNames: ''	package: 'Objetos2-Tests'!!UsuarioTest commentStamp: '' prior: 0!An UsuarioTest is a test class for testing the behavior of Usuario!!UsuarioTest methodsFor: 'test'!testBorrarPregunta	usu1 borrarPregunta: preg1.	self assert: usu1 preguntas size equals: 0.	usu1 agregarPregunta: preg1.	usu1 agregarPregunta: preg2.	self assert: usu1 preguntas size equals: 2.	usu1 borrarPregunta: preg1.	self assert: usu1 preguntas size equals: 1.! !!UsuarioTest methodsFor: 'test' stamp: 'Huggias 5/8/2020 17:45'!testPreguntasConElTopico	preg1 agregarTopico: top1.	preg2 agregarTopico: top1.	usu1 agregarPregunta: preg1.	usu1 agregarPregunta: preg2.	self assert: (preg1 topicos anySatisfy: [ :topico | topico = top1 ]).	self assert: (preg2 topicos anySatisfy: [ :topico | topico = top1 ]).	self assert: (usu1 preguntasConElTopico: top1) size equals:2.	self assert: ((usu1 preguntasConElTopico: top1) anySatisfy: [ :pregunta | pregunta = preg1 ]).	self assert: ((usu1 preguntasConElTopico: top1) anySatisfy: [ :pregunta | pregunta = preg2 ]).	self assert: (usu1 preguntasConElTopico: top2) size equals:0.! !!UsuarioTest methodsFor: 'test'!testCompareToPassword	self assert: (usu1 compareTo: 'juan' password: '123').	self deny: (usu1 compareTo: 'juan' password: '1234').! !!UsuarioTest methodsFor: 'test'!testAgregarPregunta	self assert: usu1 preguntas size equals: 0.	usu1 agregarPregunta: preg1.	self assert: usu1 preguntas size equals: 1! !!UsuarioTest methodsFor: 'test' stamp: 'Huggias 5/16/2020 12:05'!testUltimasPreguntasRelevantes	"""  Se redefiniran las preguntas para controlar las fechas de creacion de las mismas  """	preg1 := Pregunta		usuario: usu1		texto: 'me pregunto como andan las motos'		titulo: 'Que onda las motos?'		topicos: OrderedCollection new.	(Delay forSeconds: 1) wait.	preg2 := Pregunta		usuario: usu2		texto: 'me pregunto como andan los autos'		titulo: 'Que onda las autos?'		topicos: OrderedCollection new.	(Delay forSeconds: 1) wait.	preg3 := Pregunta		usuario: usu2		texto: 'me pregunto como andan los autos'		titulo: 'probando'		topicos: OrderedCollection new.	usu1 seguir: usu2.	usu1 agregarTopicoInteres: top1.	preg2 agregarTopico: top1.	usu2 agregarPregunta: preg2.	self assert: (sistema ultimasPreguntasRelevantesDe: usu1 )size equals: 1.	self assert: ((sistema ultimasPreguntasRelevantesDe: usu1 )anySatisfy: [ :pregunta | pregunta = preg2 ]).	usu1 agregarPregunta: preg1.	preg1 agregarTopico: top2.	self assert: (sistema ultimasPreguntasRelevantesDe: usu1 )size equals: 1.	preg1 agregarTopico: top1.	self assert: (sistema ultimasPreguntasRelevantesDe: usu1 )size equals: 2.	self assert: ((sistema ultimasPreguntasRelevantesDe: usu1 )anySatisfy: [ :pregunta | pregunta = preg1 ]).	usu2 agregarPregunta: preg3.	preg3 agregarTopico: top2. 	self assert: (sistema ultimasPreguntasRelevantesDe: usu1 )size equals: 3.	self assert: ((sistema ultimasPreguntasRelevantesDe: usu1 )anySatisfy: [ :pregunta | pregunta = preg3 ]).		self assert: (((sistema ultimasPreguntasRelevantesDe: usu1) first) titulo) equals: preg3 titulo .		self assert: (((sistema ultimasPreguntasRelevantesDe: usu1) last) titulo) equals: preg1 titulo .! !!UsuarioTest methodsFor: 'test'!testBorrarRespuesta	usu1 borrarRespuesta: res1.	self assert: usu1 respuestas size equals: 0.	usu1 agregarRespuesta: res1.	usu1 agregarRespuesta: res2.	self assert: usu1 respuestas size equals: 2.	usu1 borrarRespuesta: res2.	self assert: usu1 respuestas size equals: 1.! !!UsuarioTest methodsFor: 'test' stamp: 'Huggias 5/8/2020 18:46'!testMisRespuestasDeMisPreguntas	usu1 agregarPregunta: preg1.	preg1 agregarRespuesta: res1.	self assert: usu1 misRespuestasDeMisPreguntas size equals: 0.	preg1 agregarRespuesta: res2.	self assert: usu1 misRespuestasDeMisPreguntas size equals: 1.	self assert: (usu1 misRespuestasDeMisPreguntas anySatisfy: [ :respuesta | respuesta = res2]).! !!UsuarioTest methodsFor: 'test' stamp: 'Huggias 5/16/2020 12:22'!testPuntajeDeLikes	self assert: usu1 puntajeDeLikes equals: 0.	res2 agregarVotoPositivoDe: usu1.	res2 agregarVotoPositivoDe: usu2.	usu1 agregarPregunta: preg1.	preg1 agregarRespuesta: res2.	self assert: usu1 puntajeDeLikes equals: 2.	preg1 agregarVotoNegativoDe: usu2. 	self assert: usu1 puntajeDeLikes equals: 1.! !!UsuarioTest methodsFor: 'test'!testAgregarRespuesta	self assert: usu1 respuestas size equals: 0.	usu1 agregarRespuesta: res1.	self assert: usu1 respuestas size equals: 1! !!UsuarioTest methodsFor: 'test' stamp: 'Huggias 5/16/2020 12:21'!testCalcularPuntaje	self assert: usu1 calcularPuntaje equals: 0.	usu1 agregarPregunta: preg1.	self assert: usu1 calcularPuntaje equals: 20.	preg1 agregarRespuesta: res2.	self assert: usu1 calcularPuntaje equals: 20.	usu2 agregarPregunta: preg2.	preg2 agregarRespuesta: res1.	self assert: usu1 calcularPuntaje equals: 20.	preg2 agregarRespuesta: res3.	self assert: usu1 calcularPuntaje equals: 70.	res3 agregarVotoPositivoDe: usu2.	 	self assert: usu1 calcularPuntaje equals: 71.	preg1 agregarVotoPositivoDe: usu2.	preg1 agregarVotoPositivoDe: usu1. 	self assert: usu1 calcularPuntaje equals: 73. 	res2 agregarVotoNegativoDe: usu2.	self assert: usu1 calcularPuntaje equals: 72.	! !!UsuarioTest methodsFor: 'test'!testSeguir	self assert: usu1 seguidos size equals: 0.	usu1 seguir: usu2.	self assert: usu1 seguidos size equals: 1.! !!UsuarioTest methodsFor: 'test'!testAgregarTopicoInteres	self assert: usu1 topicos size equals: 0.	usu1 agregarTopicoInteres: top1.	self assert: (usu1 topicos at: 1) equals: top1. ! !!UsuarioTest methodsFor: 'test' stamp: 'Huggias 4/9/2020 17:56'!testDejarDeSeguir	self assert: usu1 seguidos size equals: 0.	usu1 seguir: usu2.	self assert: usu1 seguidos size equals: 1.	usu1 dejarDeSeguir: usu2.	self assert: usu1 seguidos size equals: 0.	usu1 dejarDeSeguir: usu2.	self assert: usu1 seguidos size equals: 0.! !!UsuarioTest methodsFor: 'test' stamp: 'Huggias 5/8/2020 18:32'!testPreguntasDeMisSeguidos	| preguntasSeguidos |.	usu2 agregarPregunta: preg2.	usu1 seguir: usu2.	preguntasSeguidos := usu1 preguntasDeMisSeguidos .	self assert: (preguntasSeguidos size) equals: 1.	self assert: (preguntasSeguidos anySatisfy: [:pregunta | pregunta=preg2]).	usu2 agregarPregunta: preg3.	preguntasSeguidos := usu1 preguntasDeMisSeguidos .	self assert: (preguntasSeguidos size) equals: 2.	self assert: (preguntasSeguidos anySatisfy: [:pregunta | pregunta=preg3]).! !!UsuarioTest methodsFor: 'test' stamp: 'Huggias 5/16/2020 12:02'!testPreguntasDeMisTopicos	| preguntasTopicos  |	usu1 agregarPregunta: preg1.	preg1 agregarTopico: top1.	usu1 agregarTopicoInteres: top1.	preguntasTopicos := usu1 preguntasDeMisTopicos: sistema.	self assert: (preguntasTopicos size) equals: 1.	self assert: (preguntasTopicos anySatisfy: [:pregunta | pregunta = preg1]).	sistema agregarUsuario: usu2.	usu2 agregarPregunta: preg2.	preg2 agregarTopico: top2.	usu1 agregarTopicoInteres: top2.	preguntasTopicos := usu1 preguntasDeMisTopicos: sistema.	self assert: (preguntasTopicos size) equals: 2.	self assert: (preguntasTopicos anySatisfy: [:pregunta | pregunta = preg2]).	preg2 agregarTopico: top1.	preguntasTopicos := usu1 preguntasDeMisTopicos: sistema.	self assert: (preguntasTopicos size) equals: 2.! !!UsuarioTest methodsFor: 'test' stamp: 'Huggias 5/16/2020 12:03'!testPreguntasInteres	usu1 seguir: usu2.	usu1 agregarTopicoInteres: top1.	preg2 agregarTopico: top1.	usu2 agregarPregunta: preg2.	self assert: (usu1 preguntasInteres:sistema )size equals: 1.	self assert: ((usu1 preguntasInteres:sistema )anySatisfy: [ :pregunta | pregunta = preg2 ]).	usu1 agregarPregunta: preg1.	preg1 agregarTopico: top2.	self assert: (usu1 preguntasInteres:sistema )size equals: 1.	preg1 agregarTopico: top1.	self assert: (usu1 preguntasInteres:sistema )size equals: 2.	self assert: ((usu1 preguntasInteres:sistema )anySatisfy: [ :pregunta | pregunta = preg1 ]).	usu2 agregarPregunta: preg3.	preg3 agregarTopico: top2. 	self assert: (usu1 preguntasInteres:sistema )size equals: 3.	self assert: ((usu1 preguntasInteres:sistema )anySatisfy: [ :pregunta | pregunta = preg3 ]).! !!UsuarioTest methodsFor: 'setUp-tearDown' stamp: 'Huggias 5/8/2020 18:54'!setUp	sistema := Sistema soleInstance.	usu1 := Usuario nombre: 'juan' contrasenia: '123'.	usu2 := Usuario nombre: 'pepe' contrasenia: '234'.	preg1 := Pregunta		usuario: usu1		texto: 'me pregunto como andan las motos'		titulo: 'Que onda las motos?'		topicos: OrderedCollection new.	preg2 := Pregunta		usuario: usu2		texto: 'me pregunto como andan los autos'		titulo: 'Que onda las autos?'		topicos: OrderedCollection new.	preg3 := Pregunta		usuario: usu2		texto: 'me pregunto como andan los autos'		titulo: 'probando'		topicos: OrderedCollection new.	res1 := Post  usuario: usu2 texto: 'A mi me gustan las motos'.	res2 := Post usuario: usu1 texto: 'A mi los autos me gustan'.	res3 := Post usuario: usu1 texto: 'A mi los autos me gustan'.	top1 := Topico nombre: 'autardos' descripcion: 'topico de autos'.	top2 := Topico nombre: 'motardas' descripcion: 'topico de motos'.	sistema agregarTopico: top1.	sistema agregarTopico: top2.	sistema agregarUsuario: usu1.	sistema agregarUsuario: usu2.! !WAComponent subclass: #BotonesDeVotosComponent	instanceVariableNames: 'posteo'	classVariableNames: ''	package: 'Objetos2-UICuoora'!!BotonesDeVotosComponent methodsFor: 'rendering' stamp: 'Huggias 5/9/2020 16:56'!renderContentOn: aCanvas	self mostrarVotos: posteo votosPositivos canvas: aCanvas texto: 'Likes'. 	aCanvas text: ' | '.	self mostrarVotos: posteo votosNegativos canvas: aCanvas texto: 'Dislikes'.! !!BotonesDeVotosComponent methodsFor: 'initialization' stamp: 'Huggias 5/9/2020 16:39'!initialize: unPosteo	self initialize.	posteo:=unPosteo.! !!BotonesDeVotosComponent methodsFor: 'private' stamp: 'Huggias 5/16/2020 12:27'!mostrarVotos: unaColeccionDeVotos canvas:aCanvas texto: unTexto	aCanvas text: unaColeccionDeVotos size.	aCanvas space.	aCanvas anchor		callback: [ (unaColeccionDeVotos = posteo votosPositivos)ifTrue: [ posteo agregarVotoPositivoDe:self session usuario ] ifFalse:[ posteo agregarVotoNegativoDe:self session usuario ]]; 		with: unTexto .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BotonesDeVotosComponent class	instanceVariableNames: ''!!BotonesDeVotosComponent class methodsFor: 'constructor' stamp: 'Huggias 5/9/2020 16:40'!posteo: unPosteo	^self new initialize: unPosteo.! !WAComponent subclass: #ControlsComponent	instanceVariableNames: 'padre textoBoton callback'	classVariableNames: ''	package: 'Objetos2-UICuoora'!!ControlsComponent methodsFor: 'initialization' stamp: 'Huggias 5/16/2020 20:16'!initialize: unPadre textoBoton: unTextoBoton callback: aCallback	self initialize: unPadre.	callback := aCallback.	textoBoton := unTextoBoton.! !!ControlsComponent methodsFor: 'initialization' stamp: 'Huggias 5/16/2020 20:06'!initialize: unPadre	self initialize.	padre := unPadre.! !!ControlsComponent methodsFor: 'rendering' stamp: 'Huggias 5/16/2020 20:36'!renderContentOn: aCanvas	aCanvas form: [		callback ifNotNil: [ aCanvas button				callback: [ callback value ] ;				with: textoBoton ].	aCanvas button		callback: [ padre answer: false ];		with: 'Volver'.		].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ControlsComponent class	instanceVariableNames: ''!!ControlsComponent class methodsFor: 'constructor' stamp: 'Huggias 5/16/2020 20:05'!padre: unPadre textoBoton: unTextoBoton callback: aCallback	^ self new initialize: unPadre textoBoton: unTextoBoton callback: aCallback.! !!ControlsComponent class methodsFor: 'constructor' stamp: 'Huggias 5/16/2020 20:05'!padre: unPadre	^ self new initialize: unPadre.! !WAComponent subclass: #HeaderComponent	instanceVariableNames: 'padre linkAUsuarioComponent'	classVariableNames: ''	package: 'Objetos2-UICuoora'!!HeaderComponent commentStamp: 'Huggias 4/9/2020 11:46' prior: 0!|application|Sistema clearSoleInstance.CuooraSampleLoader setSoleInstance: Sistema soleInstance. application := WAAdmin register: Login asApplicationAt:'login'.application sessionClass: SessionWithUser!!HeaderComponent methodsFor: 'private' stamp: 'Huggias 5/9/2020 08:52'!logoutButton: aCanvas	aCanvas anchor		callback: [ padre answer: true ];		with: 'Log out'! !!HeaderComponent methodsFor: 'intialization' stamp: 'Huggias 5/16/2020 13:45'!initialize: aPadre	self initialize.	padre:=aPadre.	linkAUsuarioComponent := LinkAUsuarioComponent padre: aPadre usuario: self session usuario.! !!HeaderComponent methodsFor: 'rendering' stamp: 'Huggias 5/16/2020 13:46'!renderContentOn: aCanvas	aCanvas		form: [ aCanvas heading: 'Cuoora'.			aCanvas				paragraph: [					aCanvas text: 'Usuario: '. 					"""self linkAUsuario: self session usuario canvas: aCanvas ."""					aCanvas render: linkAUsuarioComponent.										aCanvas space.					self logoutButton: aCanvas.				].		].	aCanvas horizontalRule.! !!HeaderComponent methodsFor: 'rendering' stamp: 'Huggias 5/16/2020 13:57'!children 	^{ linkAUsuarioComponent.  }! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HeaderComponent class	instanceVariableNames: ''!!HeaderComponent class methodsFor: 'constructor' stamp: 'Huggias 4/8/2020 20:34'!padre:aPadre	^self new initialize: aPadre. ! !WAComponent subclass: #Home	instanceVariableNames: 'headerComponent'	classVariableNames: ''	package: 'Objetos2-UICuoora'!!Home commentStamp: 'Huggias 4/9/2020 11:46' prior: 0!|application|Sistema clearSoleInstance.CuooraSampleLoader setSoleInstance: Sistema soleInstance. application := WAAdmin register: Login asApplicationAt:'login'.application sessionClass: SessionWithUser!!Home methodsFor: 'rendering' stamp: 'Huggias 5/16/2020 12:30'!renderContentOn: aCanvas	aCanvas render: headerComponent.	aCanvas		paragraph: [ 			aCanvas heading level:2; with: 'Ultimas preguntas'. 			aCanvas				form: [ self botonNuevaPregunta: aCanvas ]. 					].		self mostrarPreguntasRelevantes: aCanvas.! !!Home methodsFor: 'rendering' stamp: 'Huggias 4/8/2020 19:53'!children	^ { headerComponent }.! !!Home methodsFor: 'private' stamp: 'Huggias 5/16/2020 12:28'!mostrarPreguntasRelevantes: aCanvas		(Sistema soleInstance ultimasPreguntasRelevantesDe: self session usuario )		do: [ :each | 			aCanvas render: (PreguntaComponent abrir:true anchorUsuario:true pregunta:each padre:self).		]! !!Home methodsFor: 'private' stamp: 'Huggias 5/9/2020 09:26'!botonNuevaPregunta: aCanvas	aCanvas button		callback: [ (self				call:					(NuevaPregunta						pregunta:							(Pregunta								usuario: self session usuario								texto: ''								titulo: ''								topicos: Set new)))				ifTrue: [ self answer ] ];		with: 'Agregar pregunta'.! !!Home methodsFor: 'initialization' stamp: 'Huggias 4/9/2020 11:00'!initialize	super initialize. 	headerComponent := (HeaderComponent padre:self).	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Home class	instanceVariableNames: ''!!Home class methodsFor: 'constructor' stamp: 'Huggias 4/8/2020 19:47'!usuario: aUser	^self new initialize: aUser.	! !WAComponent subclass: #LinkAUsuarioComponent	instanceVariableNames: 'padre usuario'	classVariableNames: ''	package: 'Objetos2-UICuoora'!!LinkAUsuarioComponent methodsFor: 'rendering' stamp: 'Huggias 5/16/2020 13:44'!renderContentOn: aCanvas	aCanvas		strong: [ aCanvas anchor				callback: [ (padre call: (ProfileUsuario usuario: usuario))						ifTrue: [ padre answer: true ] ];				with: usuario nombre ]! !!LinkAUsuarioComponent methodsFor: 'initialization' stamp: 'Huggias 5/16/2020 13:43'!initialize: unPadre usuario: unUsuario 	self initialize.	padre:= unPadre.	usuario := unUsuario.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LinkAUsuarioComponent class	instanceVariableNames: ''!!LinkAUsuarioComponent class methodsFor: 'constructor' stamp: 'Huggias 5/16/2020 13:42'!padre: unPadre usuario: unUsuario	^self new initialize: unPadre usuario: unUsuario.! !WAComponent subclass: #ListaDeTopicosComponent	instanceVariableNames: 'posteo'	classVariableNames: ''	package: 'Objetos2-UICuoora'!!ListaDeTopicosComponent methodsFor: 'rendering' stamp: 'Huggias 5/16/2020 13:27'!renderContentOn: aCanvas	aCanvas emphasis: 'Topicos: '.	(posteo topicos)		do: [ :topico | 			aCanvas emphasis: topico nombre.			aCanvas text: ' | ' ].	aCanvas break.! !!ListaDeTopicosComponent methodsFor: 'initialization' stamp: 'Huggias 5/16/2020 13:17'!initialize: unPosteo	self initialize.	posteo := unPosteo.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ListaDeTopicosComponent class	instanceVariableNames: ''!!ListaDeTopicosComponent class methodsFor: 'constructor' stamp: 'Huggias 5/16/2020 13:25'!posteo: unPosteo	^self new initialize: unPosteo.! !WAComponent subclass: #Login	instanceVariableNames: 'username password user'	classVariableNames: ''	package: 'Objetos2-UICuoora'!!Login methodsFor: 'private' stamp: 'Huggias 5/9/2020 08:58'!inputUsuario: aCanvas	aCanvas paragraph: [ 					aCanvas label: 'Usuario: '.					aCanvas textInput						callback:[:value | self usuario: value];						with: ''.				 ].! !!Login methodsFor: 'private' stamp: 'Huggias 5/9/2020 08:58'!inputContrasenia: aCanvas	aCanvas paragraph: [ 					aCanvas label: 'Contraseña: '.					aCanvas passwordInput 						callback:[:value | self password: value];						with: ''.				 ].! !!Login methodsFor: 'private' stamp: 'Huggias 5/9/2020 09:29'!botonLogIn: aCanvas	aCanvas button		callback: [ self logear ];		with: 'Login'! !!Login methodsFor: 'initialization' stamp: 'Huggias 5/8/2020 13:08'!initialize 	super initialize.	username := ''.	password := ''.	! !!Login methodsFor: 'rendering' stamp: 'Huggias 5/9/2020 09:29'!renderContentOn: aCanvas	aCanvas paragraph: [		aCanvas heading: 'Cuoora'.	].	aCanvas horizontalRule.	aCanvas form: [ 						self inputUsuario: aCanvas.			self inputContrasenia: aCanvas.			self botonLogIn: aCanvas.	].! !!Login methodsFor: 'callbacks' stamp: 'Huggias 5/8/2020 13:08'!password: aPassword	password := aPassword.! !!Login methodsFor: 'callbacks'!usuario: aUsuario	username := aUsuario.! !!Login methodsFor: 'callbacks' stamp: 'Huggias 5/8/2020 13:08'!logear	user := Sistema soleInstance validar: username password: password.	( user )		ifNil:[			self call: (WrongLogin new).		]		ifNotNil: [ 			self session usuario: user.			self call: (Home new).		].! !WAComponent subclass: #NuevaPregunta	instanceVariableNames: 'usuario titulo descripcion err pregunta topicoActual headerComponent listaDeTopicosComponent controlsComponent'	classVariableNames: ''	package: 'Objetos2-UICuoora'!!NuevaPregunta methodsFor: 'private' stamp: 'Huggias 5/9/2020 13:28'!mostrarError: aCanvas	(err) ifNotNil:[		aCanvas text: err.		err:=nil.	].! !!NuevaPregunta methodsFor: 'private' stamp: 'Huggias 5/16/2020 12:32'!inputs: aCanvas	aCanvas		paragraph: [ aCanvas label: 'Titulo: '.			aCanvas textInput				callback: [ :value | self titulo: value ];				with: pregunta titulo ].	aCanvas		paragraph: [ aCanvas label: 'Desarrollo '.			aCanvas textArea				callback: [ :value | self descripcion: value ];				with: pregunta descripcion ]! !!NuevaPregunta methodsFor: 'private' stamp: 'Huggias 5/9/2020 09:42'!botonAgregarTopico: aCanvas	aCanvas button		callback: [ self addTopico ];		with: 'Agregar topico'! !!NuevaPregunta methodsFor: 'private' stamp: 'Huggias 5/9/2020 09:41'!selectConTopicos: aCanvas	aCanvas select		list: (Sistema soleInstance topicos collect: [ :each | each nombre ]);		callback: [ :value | topicoActual := value ]! !!NuevaPregunta methodsFor: 'public' stamp: 'Huggias 4/4/2020 13:55'!titulo: unTitulo	titulo := unTitulo.	pregunta titulo: unTitulo.! !!NuevaPregunta methodsFor: 'public' stamp: 'Huggias 5/8/2020 13:06'!descripcion: unaDescripcion	descripcion := unaDescripcion.	pregunta descripcion: unaDescripcion.! !!NuevaPregunta methodsFor: 'rendering' stamp: 'Huggias 5/16/2020 20:28'!renderContentOn: aCanvas	aCanvas render: headerComponent.	aCanvas heading level:3; with: 'Agregar pregunta'.	aCanvas form: [ 			self inputs: aCanvas.			self selectConTopicos: aCanvas.			self botonAgregarTopico: aCanvas. aCanvas break.			aCanvas render: listaDeTopicosComponent.			aCanvas render: controlsComponent. 			].	aCanvas break.	self mostrarError: aCanvas! !!NuevaPregunta methodsFor: 'rendering' stamp: 'Huggias 5/16/2020 20:20'!children 	^{ headerComponent. listaDeTopicosComponent. controlsComponent  }.! !!NuevaPregunta methodsFor: 'initialization' stamp: 'Huggias 5/16/2020 20:22'!initialize: unaPregunta	headerComponent := HeaderComponent padre:self.	listaDeTopicosComponent := ListaDeTopicosComponent posteo: unaPregunta.	pregunta := unaPregunta.	err := nil.	controlsComponent := ControlsComponent padre: self textoBoton: 'Guardar' callback: [ self agregarPregunta ].! !!NuevaPregunta methodsFor: 'callbacks' stamp: 'Huggias 5/8/2020 13:22'!addTopico	pregunta agregarTopico: (Sistema soleInstance topicoConNombre: topicoActual ).! !!NuevaPregunta methodsFor: 'callbacks' stamp: 'Huggias 5/8/2020 13:22'!agregarPregunta	(pregunta titulo = '' or: pregunta descripcion = '')		ifTrue: [ err := 'Datos incompletos' ]		ifFalse: [ (self session usuario) agregarPregunta: pregunta.				self answer:false].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!NuevaPregunta class	instanceVariableNames: ''!!NuevaPregunta class methodsFor: 'constructor' stamp: 'Huggias 4/4/2020 14:09'!pregunta: unaPregunta	^self new initialize: unaPregunta.! !WAComponent subclass: #NuevaRespuesta	instanceVariableNames: 'pregunta respuesta err headerComponent preguntaComponent controlsComponent'	classVariableNames: ''	package: 'Objetos2-UICuoora'!!NuevaRespuesta methodsFor: 'rendering' stamp: 'Huggias 5/16/2020 20:26'!renderContentOn: aCanvas	aCanvas render: headerComponent.	aCanvas render: preguntaComponent .	aCanvas form: [ 		aCanvas text: 'Responder'. aCanvas space.		aCanvas textArea callback: [:value | respuesta texto: value].		aCanvas break.		aCanvas render: controlsComponent.	].	self mostrarError: aCanvas.		! !!NuevaRespuesta methodsFor: 'rendering' stamp: 'Huggias 5/16/2020 20:27'!chlidren	^{headerComponent. preguntaComponent. controlsComponent  }! !!NuevaRespuesta methodsFor: 'callbacks' stamp: 'Huggias 4/9/2020 10:19'!addRespuesta	(respuesta texto = '')ifTrue: [ err:='El texto no puede estar en blanco' ]	ifFalse:[		pregunta agregarRespuesta: respuesta.		self answer:false.	].! !!NuevaRespuesta methodsFor: 'private' stamp: 'Huggias 5/9/2020 13:30'!mostrarError: aCanvas	(err)ifNotNil:[		aCanvas paragraph: err.		err:=nil.	].! !!NuevaRespuesta methodsFor: 'initialization' stamp: 'Huggias 5/16/2020 20:26'!initialize: unaPregunta	self initialize.	pregunta := unaPregunta.	respuesta := Post usuario: (self session usuario) texto: ''.	headerComponent := HeaderComponent padre:self.	preguntaComponent := PreguntaComponent abrir:false anchorUsuario:true pregunta:pregunta padre:self.		err:=nil.	controlsComponent := ControlsComponent padre: self  textoBoton: 'Agregar' callback: [ self addRespuesta  ].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!NuevaRespuesta class	instanceVariableNames: ''!!NuevaRespuesta class methodsFor: 'constructor' stamp: 'Huggias 4/8/2020 12:22'!pregunta: unaPregunta	^self new initialize: unaPregunta.! !WAComponent subclass: #PreguntaComponent	instanceVariableNames: 'detalle pregunta padre anchorUsuario botonesDeVotosComponent listaDeTopicosComponent linkAUsuarioComponent'	classVariableNames: ''	package: 'Objetos2-UICuoora'!!PreguntaComponent methodsFor: 'initialization' stamp: 'Huggias 5/16/2020 13:56'!initialize:unBoolean anchorUsuario:boolean pregunta: unaPregunta padre:unPadre	self initialize.	anchorUsuario:=boolean.	detalle := unBoolean.	pregunta:=unaPregunta.	padre:=unPadre.	botonesDeVotosComponent := BotonesDeVotosComponent posteo: unaPregunta.	listaDeTopicosComponent := ListaDeTopicosComponent posteo: unaPregunta.	linkAUsuarioComponent := LinkAUsuarioComponent padre: unPadre usuario: pregunta usuario.	! !!PreguntaComponent methodsFor: 'rendering' stamp: 'Huggias 5/16/2020 13:37'!renderContentOn: aCanvas	self tituloPregunta: aCanvas.	aCanvas render: listaDeTopicosComponent. 	aCanvas break.	self mostrarOwnerPregunta: aCanvas.	self mostrarRespuestas: aCanvas.	aCanvas break.	aCanvas render: botonesDeVotosComponent.	self botonAbrirPregunta: aCanvas.	aCanvas horizontalRule! !!PreguntaComponent methodsFor: 'rendering' stamp: 'Huggias 5/16/2020 13:53'!children	^ { botonesDeVotosComponent. listaDeTopicosComponent. linkAUsuarioComponent }.! !!PreguntaComponent methodsFor: 'private' stamp: 'Huggias 5/9/2020 13:45'!botonAbrirPregunta: aCanvas	detalle		ifFalse: [ ^ self ].	aCanvas break.	aCanvas		form: [ aCanvas button				callback: [ (padre call: (PreguntaDetalle pregunta: pregunta))						ifTrue: [ padre answer: true ] ];				with: 'Abrir pregunta' ]! !!PreguntaComponent methodsFor: 'private' stamp: 'Huggias 5/9/2020 13:42'!mostrarRespuestas: aCanvas	| nroRespuestas |	nroRespuestas := pregunta respuestas size.	aCanvas text: ' | Respuestas: '.	aCanvas text: nroRespuestas.! !!PreguntaComponent methodsFor: 'private' stamp: 'Huggias 5/16/2020 13:58'!mostrarOwnerPregunta: aCanvas	aCanvas text: 'Realizada por: '.	aCanvas		strong: [ anchorUsuario				ifTrue: [ aCanvas render: linkAUsuarioComponent.]				ifFalse: [ aCanvas text: pregunta usuario nombre ] ]! !!PreguntaComponent methodsFor: 'private' stamp: 'Huggias 5/9/2020 13:33'!tituloPregunta: aCanvas	aCanvas emphasis		with: [ aCanvas heading				level: 3;				with: pregunta titulo ].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PreguntaComponent class	instanceVariableNames: ''!!PreguntaComponent class methodsFor: 'constructor' stamp: 'Huggias 4/9/2020 11:29'!abrir: unBoolean anchorUsuario:boolean pregunta:unaPregunta padre:unPadre	^self new initialize:unBoolean anchorUsuario:boolean pregunta:unaPregunta padre:unPadre.! !WAComponent subclass: #PreguntaDetalle	instanceVariableNames: 'pregunta headerComponent preguntaComponent botonesDeVotosComponent controlsComponent'	classVariableNames: ''	package: 'Objetos2-UICuoora'!!PreguntaDetalle methodsFor: 'private' stamp: 'Huggias 5/9/2020 18:26'!mostrarRespuestas: aCanvas	pregunta respuestas		do: [ :unaRespuesta | 			aCanvas render: (RespuestaComponent respuesta: unaRespuesta padre: self).			aCanvas horizontalRule		].! !!PreguntaDetalle methodsFor: 'initialization' stamp: 'Huggias 5/16/2020 20:36'!initialize: unaPregunta	self initialize.	headerComponent := HeaderComponent padre:self.		pregunta:=unaPregunta.	preguntaComponent := PreguntaComponent abrir: false anchorUsuario:true pregunta:pregunta padre:self.	controlsComponent := ControlsComponent padre: self textoBoton: 'Agregar respuesta' callback: [ (self call: (NuevaRespuesta pregunta: pregunta))ifTrue:[self answer:true] ].! !!PreguntaDetalle methodsFor: 'rendering' stamp: 'Huggias 5/16/2020 20:38'!renderContentOn: aCanvas	aCanvas render: headerComponent.	aCanvas render: preguntaComponent.	self mostrarRespuestas: aCanvas.	aCanvas heading level:3; with: 'No hay mas respuestas'.	aCanvas render: controlsComponent.! !!PreguntaDetalle methodsFor: 'rendering' stamp: 'Huggias 5/16/2020 20:30'!children	^{headerComponent. preguntaComponent. controlsComponent }.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PreguntaDetalle class	instanceVariableNames: ''!!PreguntaDetalle class methodsFor: 'constructor' stamp: 'Huggias 4/8/2020 11:49'!pregunta: unaPregunta	^self new initialize: unaPregunta.! !WAComponent subclass: #ProfileUsuario	instanceVariableNames: 'usuario headerComponent controlsComponent'	classVariableNames: ''	package: 'Objetos2-UICuoora'!!ProfileUsuario methodsFor: 'private' stamp: 'Huggias 5/9/2020 16:13'!mostrarFollowButton: aCanvas	(usuario = self session usuario)		ifFalse: [ self session usuario seguidos				detect: [ :each | each = usuario ]				ifFound: [ aCanvas anchor						callback: [ self session usuario dejarDeSeguir: usuario ];						with: 'Unfollow' ]				ifNone: [ aCanvas anchor						callback: [ self session usuario seguir: usuario ];						with: 'Follow' ] ]! !!ProfileUsuario methodsFor: 'private' stamp: 'Huggias 5/9/2020 16:14'!mostrarPreguntas: aCanvas	usuario preguntas		do: [ :each | 			aCanvas				render: (PreguntaComponent abrir: false anchorUsuario:false pregunta: each padre: self) ].! !!ProfileUsuario methodsFor: 'rendering' stamp: 'Huggias 5/16/2020 20:40'!renderContentOn: aCanvas	aCanvas render: headerComponent.	aCanvas heading level:2; with: 'Preguntas de ' , usuario nombre.	self mostrarFollowButton: aCanvas.	self mostrarPreguntas: aCanvas.	aCanvas render: controlsComponent.! !!ProfileUsuario methodsFor: 'rendering' stamp: 'Huggias 4/8/2020 20:52'!children	^{headerComponent}.! !!ProfileUsuario methodsFor: 'initialization' stamp: 'Huggias 5/16/2020 20:39'!initialize: unUsuario	self initialize.	headerComponent:=HeaderComponent padre:self.	usuario:=unUsuario.	controlsComponent := ControlsComponent padre: self.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ProfileUsuario class	instanceVariableNames: ''!!ProfileUsuario class methodsFor: 'constructor' stamp: 'Huggias 4/8/2020 12:54'!usuario: unUsuario	^self new initialize: unUsuario.! !WAComponent subclass: #RespuestaComponent	instanceVariableNames: 'respuesta padre botonesDeVotosComponent linkAUsuarioComponent'	classVariableNames: ''	package: 'Objetos2-UICuoora'!!RespuestaComponent methodsFor: 'initialization' stamp: 'Huggias 5/16/2020 13:59'!initialize: unaRespuesta padre: unPadre	self initialize.	respuesta := unaRespuesta.	padre := unPadre.	botonesDeVotosComponent := BotonesDeVotosComponent posteo: respuesta.	linkAUsuarioComponent := LinkAUsuarioComponent padre: unPadre usuario: respuesta usuario.! !!RespuestaComponent methodsFor: 'rendering' stamp: 'Huggias 5/16/2020 14:00'!renderContentOn: aCanvas	aCanvas render: linkAUsuarioComponent.	aCanvas paragraph: respuesta texto.	aCanvas break.	aCanvas render: botonesDeVotosComponent! !!RespuestaComponent methodsFor: 'rendering' stamp: 'Huggias 5/16/2020 13:59'!children	^{ linkAUsuarioComponent  }.! !!RespuestaComponent methodsFor: 'private' stamp: 'Huggias 5/9/2020 18:14'!linkAUsuario: usuario canvas: aCanvas	aCanvas strong:[						aCanvas anchor 							callback:[ (padre call: (ProfileUsuario usuario: usuario ))ifTrue: [ padre answer:true ] ];							with: usuario nombre ].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RespuestaComponent class	instanceVariableNames: ''!!RespuestaComponent class methodsFor: 'constructor' stamp: 'Huggias 5/9/2020 17:35'!respuesta: unaRespuesta padre: unPadre	^self new initialize: unaRespuesta padre: unPadre.! !WASession subclass: #SessionWithUser	instanceVariableNames: 'user'	classVariableNames: ''	package: 'Objetos2-UICuoora'!!SessionWithUser methodsFor: 'accessing' stamp: 'Huggias 4/8/2020 11:11'!usuario: anUser	user:= anUser.! !!SessionWithUser methodsFor: 'accessing' stamp: 'Huggias 4/8/2020 11:11'!usuario	^user.! !WAComponent subclass: #WrongLogin	instanceVariableNames: 'msg'	classVariableNames: ''	package: 'Objetos2-UICuoora'!!WrongLogin methodsFor: 'rendering'!renderContentOn: aCanvas	aCanvas		form: [ aCanvas paragraph: msg.			aCanvas button				callback: [ self volver ];				with: 'intentar de nuevo'].! !!WrongLogin methodsFor: 'initialization'!initialize 	super initialize.	msg := 'Credenciales de usuario incorrectas'.! !!WrongLogin methodsFor: 'callbacks'!volver	self answer .! !Object subclass: #Post	instanceVariableNames: 'texto fechaDeCreacion usuario votosPositivos votosNegativos'	classVariableNames: ''	package: 'Objetos2-Model'!!Post methodsFor: 'initialization' stamp: 'Huggias 5/7/2020 11:14'!initialize: unUsuario texto: unTexto	fechaDeCreacion := DateAndTime now.	usuario:= unUsuario.	texto:= unTexto.	votosPositivos:= OrderedCollection new.	votosNegativos:= OrderedCollection new.! !!Post methodsFor: 'public' stamp: 'Huggias 5/16/2020 11:48'!agregarVotoPositivoDe: user	self removerVotoDe: user aUnaColeccion: votosNegativos. 	self agregar: (Voto usuario: user) aUnaColeccion: votosPositivos. ! !!Post methodsFor: 'public' stamp: 'Huggias 5/16/2020 11:41'!soyDe: unUsuario	^(usuario = unUsuario).! !!Post methodsFor: 'public' stamp: 'Huggias 5/8/2020 17:02'!diferenciaDeLikes	| cantidadDeVotosPositivos cantidadDeVotosNegativos |	cantidadDeVotosPositivos := self votosPositivos size.	cantidadDeVotosNegativos := self votosNegativos size.	^cantidadDeVotosPositivos - cantidadDeVotosNegativos.! !!Post methodsFor: 'public' stamp: 'Huggias 5/16/2020 11:49'!agregarVotoNegativoDe: user	self removerVotoDe: user aUnaColeccion: votosPositivos. 	self agregar: (Voto usuario: user) aUnaColeccion: votosNegativos. ! !!Post methodsFor: 'accessing'!usuario	^usuario! !!Post methodsFor: 'accessing' stamp: 'Huggias 5/7/2020 11:14'!fecha	^fechaDeCreacion.! !!Post methodsFor: 'accessing' stamp: 'Huggias 4/8/2020 12:07'!texto	^texto.! !!Post methodsFor: 'accessing' stamp: 'Huggias 5/7/2020 11:15'!votosNegativos	^votosNegativos! !!Post methodsFor: 'accessing' stamp: 'Huggias 5/7/2020 11:15'!votosPositivos	^votosPositivos! !!Post methodsFor: 'accessing' stamp: 'Huggias 4/8/2020 12:31'!texto: unTexto	texto := unTexto.! !!Post methodsFor: 'private' stamp: 'Huggias 5/8/2020 16:51'!agregar: unVoto aUnaColeccion: unaColeccionDeVotos	(unaColeccionDeVotos anySatisfy: [:voto | (voto usuario) = (unVoto usuario)  ])ifFalse: [ 		unaColeccionDeVotos add: unVoto. 	].	! !!Post methodsFor: 'private' stamp: 'Huggias 5/7/2020 12:16'!removerVotoDe: unUsuario aUnaColeccion: unaColeccionDeVotos	unaColeccionDeVotos removeAllSuchThat: [ :voto | (voto usuario) = unUsuario  ].	! !!Post methodsFor: 'private' stamp: 'Huggias 5/7/2020 12:40'!coleccionDeVotos: aBoolean	aBoolean ifTrue: [ 		^votosPositivos 	]. 	^votosNegativos.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Post class	instanceVariableNames: ''!!Post class methodsFor: 'constructor'!usuario: unUsuario texto: unTexto	^self new initialize: unUsuario texto: unTexto.! !Post subclass: #Pregunta	instanceVariableNames: 'titulo respuestas topicos'	classVariableNames: ''	package: 'Objetos2-Model'!!Pregunta methodsFor: 'public' stamp: 'Huggias 5/7/2020 13:34'!borrar	respuestas do: [ :respuesta |		(respuesta usuario) borrarRespuesta: respuesta.	].	usuario borrarPregunta: self.	! !!Pregunta methodsFor: 'public' stamp: 'Huggias 5/16/2020 11:41'!respuestasDelUsuario: unUsuario	^respuestas select: [ :respuesta | respuesta soyDe: unUsuario ].! !!Pregunta methodsFor: 'public' stamp: 'Huggias 5/7/2020 12:58'!tengoElTopico: unTopico	^ topicos anySatisfy: [ :topico | topico = unTopico  ].! !!Pregunta methodsFor: 'public' stamp: 'Huggias 5/8/2020 13:01'!agregarTopico: unTopico	topicos add: unTopico.! !!Pregunta methodsFor: 'public' stamp: 'Huggias 5/7/2020 18:41'!agregarRespuesta: respuesta	respuestas add: respuesta.	respuesta usuario agregarRespuesta: respuesta.! !!Pregunta methodsFor: 'public' stamp: 'Huggias 5/7/2020 11:09'!respuestasOrderByLikes	^ respuestas		asSortedCollection: [ :resp1 :resp2 | resp1 diferenciaDeLikes > resp2 diferenciaDeLikes ]! !!Pregunta methodsFor: 'accessing' stamp: 'Huggias 4/4/2020 13:48'!titulo: unTitulo	titulo := unTitulo.! !!Pregunta methodsFor: 'accessing' stamp: 'Huggias 4/3/2020 18:19'!titulo	^ titulo.! !!Pregunta methodsFor: 'accessing' stamp: 'Huggias 5/8/2020 13:24'!respuestas	^respuestas.! !!Pregunta methodsFor: 'accessing' stamp: 'Huggias 5/7/2020 11:16'!descripcion	^texto.! !!Pregunta methodsFor: 'accessing' stamp: 'Huggias 5/7/2020 11:17'!descripcion: unaDescripcion	texto := unaDescripcion.! !!Pregunta methodsFor: 'accessing' stamp: 'Huggias 5/8/2020 13:20'!topicos	^topicos.! !!Pregunta methodsFor: 'initialization' stamp: 'Huggias 5/7/2020 11:23'!initialize: unUsuario texto: unTexto titulo: unTitulo topicos: unaColeccionDeTopicos	self initialize: unUsuario texto: unTexto.	titulo:= unTitulo.	respuestas:= OrderedCollection new.	topicos := unaColeccionDeTopicos.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Pregunta class	instanceVariableNames: ''!!Pregunta class methodsFor: 'constructor' stamp: 'Huggias 5/7/2020 11:24'!usuario: unUsuario texto: unTexto titulo: unTitulo topicos: unaColeccionDeTopicos 	^self new initialize: unUsuario texto: unTexto titulo: unTitulo topicos: unaColeccionDeTopicos ! !Object subclass: #Sistema	instanceVariableNames: 'usuarios topicos'	classVariableNames: ''	package: 'Objetos2-Model'!!Sistema commentStamp: 'Huggias 4/9/2020 11:47' prior: 0!|application|Sistema clearSoleInstance.CuooraSampleLoader setSoleInstance: Sistema soleInstance. application := WAAdmin register: Login asApplicationAt:'login'.application sessionClass: SessionWithUser!!Sistema methodsFor: 'public' stamp: 'Huggias 5/16/2020 21:34'!validar: aUsername password: aPassword 	^usuarios detect: [ :user | (user compareTo: aUsername  password: aPassword) ] ifNone: [ ^nil. ].! !!Sistema methodsFor: 'public' stamp: 'Huggias 5/16/2020 11:35'!preguntasDeUnTopico: unTopico	^usuarios flatCollect: [:usuario | usuario preguntasConElTopico: unTopico ]! !!Sistema methodsFor: 'public'!agregarTopico: topico	topicos add: topico	! !!Sistema methodsFor: 'public'!agregarUsuario: usuario	usuarios add: usuario! !!Sistema methodsFor: 'public' stamp: 'Huggias 5/16/2020 11:59'!ultimasPreguntasRelevantesDe: unUsuario	^unUsuario ultimasPreguntasRelevantes: self.! !!Sistema methodsFor: 'interface building' stamp: 'Huggias 5/7/2020 11:05'!topicoConNombre: nombreDeTopico 	^ topicos detect: [ :each | each nombre = nombreDeTopico ].! !!Sistema methodsFor: 'accessing'!topicos 	^topicos! !!Sistema methodsFor: 'testing' stamp: 'Huggias 5/7/2020 11:03'!usuarios         	^usuarios! !!Sistema methodsFor: 'initialization' stamp: 'Huggias 4/3/2020 19:43'!initialize	usuarios:= OrderedCollection new.	topicos:= OrderedCollection new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Sistema class	instanceVariableNames: 'soleInstance'!!Sistema class methodsFor: 'instance creation'!soleInstance 	soleInstance ifNil: [ soleInstance := self new. ].	^soleInstance.! !!Sistema class methodsFor: 'instance creation'!clearSoleInstance 	soleInstance := nil.! !Object subclass: #Topico	instanceVariableNames: 'nombre descripcion'	classVariableNames: ''	package: 'Objetos2-Model'!!Topico methodsFor: 'initialization' stamp: 'Huggias 5/7/2020 11:19'!initialize: unNombre descripcion: unaDescripcion	nombre:= unNombre.	descripcion := unaDescripcion.! !!Topico methodsFor: 'accessing' stamp: 'Huggias 4/4/2020 13:35'!nombre 	^nombre.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Topico class	instanceVariableNames: ''!!Topico class methodsFor: 'constructor' stamp: 'Huggias 5/8/2020 12:53'!nombre: unNombre descripcion: unaDescripcion	^self new initialize: unNombre descripcion: unaDescripcion.! !Object subclass: #Usuario	instanceVariableNames: 'nombre contrasenia fechaDeCreacion preguntas respuestas topicosDeInteres seguidos'	classVariableNames: ''	package: 'Objetos2-Model'!!Usuario methodsFor: 'initialization' stamp: 'Huggias 5/8/2020 12:46'!initialize: unNombre contrasenia: unaContrasenia	nombre:= unNombre.	contrasenia:= unaContrasenia.	fechaDeCreacion := DateAndTime now.	preguntas:= OrderedCollection new.	respuestas:= OrderedCollection new.	topicosDeInteres := OrderedCollection new.	seguidos:= OrderedCollection new.! !!Usuario methodsFor: 'testing'!seguidos	^seguidos.! !!Usuario methodsFor: 'public' stamp: 'Huggias 5/7/2020 13:36'!borrarRespuesta: unaRespuesta	respuestas removeAllSuchThat: [ :respuesta | respuesta = unaRespuesta].! !!Usuario methodsFor: 'public' stamp: 'Huggias 5/7/2020 11:35'!seguir: usuario	seguidos add: usuario.! !!Usuario methodsFor: 'public' stamp: 'Huggias 5/7/2020 11:17'!compareTo: aUsername password: aPassword 	^((nombre = aUsername) & (contrasenia = aPassword)).! !!Usuario methodsFor: 'public' stamp: 'Huggias 5/7/2020 11:41'!dejarDeSeguir: usuario	seguidos removeAllSuchThat: [:usuarioSeguido | usuario = usuarioSeguido].! !!Usuario methodsFor: 'public'!agregarRespuesta: respuesta	respuestas add: respuesta! !!Usuario methodsFor: 'public' stamp: 'Huggias 5/7/2020 12:46'!agregarTopicoInteres: nuevoTopicoDeInteres	topicosDeInteres add: nuevoTopicoDeInteres! !!Usuario methodsFor: 'public'!agregarPregunta: pregunta	preguntas add: pregunta! !!Usuario methodsFor: 'public' stamp: 'Huggias 5/8/2020 16:43'!calcularPuntaje	|puntajePorPreguntas puntajePorRespuestas|	puntajePorPreguntas := preguntas size * 20.	puntajePorRespuestas := ((respuestas size) - (self misRespuestasDeMisPreguntas) size) * 50.	^puntajePorPreguntas + puntajePorRespuestas + self puntajeDeLikes.! !!Usuario methodsFor: 'public' stamp: 'Huggias 5/16/2020 11:58'!ultimasPreguntasRelevantes: unSistema 	| pregs  |	pregs := (self preguntasInteres: unSistema) 		asSortedCollection: [ :each1 :each2 | each2 fecha < each1 fecha ].	^ pregs first: (pregs size min: 5).! !!Usuario methodsFor: 'public' stamp: 'Huggias 5/7/2020 13:37'!borrarPregunta: unaPregunta	preguntas removeAllSuchThat: [ :pregunta | pregunta = unaPregunta ].! !!Usuario methodsFor: 'public' stamp: 'Huggias 5/16/2020 21:08'!preguntasConElTopico: unTopico	^ (preguntas select: [ :pregunta | pregunta tengoElTopico: unTopico. ]) asSet.	! !!Usuario methodsFor: 'accessing'!preguntas	^preguntas! !!Usuario methodsFor: 'accessing'!respuestas	^respuestas.! !!Usuario methodsFor: 'accessing'!nombre	^nombre.! !!Usuario methodsFor: 'accessing' stamp: 'Huggias 5/7/2020 11:17'!contrasenia	^contrasenia.! !!Usuario methodsFor: 'accessing' stamp: 'Huggias 5/7/2020 12:51'!topicos	^topicosDeInteres.! !!Usuario methodsFor: 'private'!puntajeDeLikes	|difPreg difRes|	difPreg:= preguntas sumNumbers: [:var | var diferenciaDeLikes].	difRes:= respuestas sumNumbers: [:var | var diferenciaDeLikes].	^difPreg + difRes ! !!Usuario methodsFor: 'private' stamp: 'Huggias 5/16/2020 11:36'!preguntasDeMisTopicos: unSistema    ^(topicosDeInteres  flatCollect: [:topico | unSistema preguntasDeUnTopico: topico ]) asSet.! !!Usuario methodsFor: 'private' stamp: 'Huggias 5/16/2020 11:58'!preguntasInteres: unSistema	| preguntasDeTopicos preguntasDeSeguidos|	preguntasDeTopicos := self preguntasDeMisTopicos: unSistema.		preguntasDeSeguidos := self preguntasDeMisSeguidos.	^(preguntasDeTopicos union: preguntasDeSeguidos ) asSet .! !!Usuario methodsFor: 'private' stamp: 'Huggias 5/16/2020 21:07'!preguntasDeMisSeguidos	^ (seguidos flatCollect: [ :usuarioSeguido | usuarioSeguido preguntas ]) asSet. ! !!Usuario methodsFor: 'private' stamp: 'Huggias 5/16/2020 11:54'!misRespuestasDeMisPreguntas	 ^preguntas flatCollect: [:pregunta | pregunta respuestasDelUsuario: self ].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Usuario class	instanceVariableNames: ''!!Usuario class methodsFor: 'constructor' stamp: 'Huggias 5/8/2020 12:46'!nombre: unNombre contrasenia: unaContrasenia	^self new initialize: unNombre contrasenia: unaContrasenia.	! !Object subclass: #Voto	instanceVariableNames: 'fechaDeCreacion usuario'	classVariableNames: ''	package: 'Objetos2-Model'!!Voto methodsFor: 'accessing'!usuario	^usuario! !!Voto methodsFor: 'initialization' stamp: 'Huggias 5/7/2020 11:15'!initialize: unUsuario	fechaDeCreacion := DateAndTime now.	usuario:= unUsuario.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Voto class	instanceVariableNames: ''!!Voto class methodsFor: 'constructor'!usuario: unUsuario	^self new initialize: unUsuario.! !