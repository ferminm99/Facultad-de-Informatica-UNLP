1. Supongamos que tenemos una abuela que tiene dos tipos de lápices para dibujar: 10 de
colores y 15 negros. Además tenemos tres clases de niños que quieren dibujar con los
lápices: los que quieren usar sólo los lápices de colores (tipo C), los que usan sólo los
lápices negros (tipo N), y los niños que usan cualquier tipo de lápiz (tipo A).

a) Implemente un código para cada clase de niño de manera que ejecute pedido de
lápiz, lo use por 10 minutos y luego lo devuelva. Además, debe modelarse el
proceso abuela encargada de asignar los lápices. 

chan canalEnvioAll(Object lapiz);
chan canalEnvioColor(Object lapiz);
chan canalEnvioNegro(Object lapiz);
chan canalA(int);
chan canalC(int);
chan canalN(int);


Process abuela{
    cantColor = 10;
    cantNegros = 15;
    while True{

        receive señales();

        if (cantNegros > 0);receive canalN(id):{cantNegros--; send canalEnvioNegro[id](lapiz)}
        -  (cantColor > 0);receive canalC(id):{cantColor--; send canalEnvioColor[id](lapiz)}
        -  (cantNegros > 0);receive canalA(id):{cantNegros--; send canalEnvioAll[id](lapiz)}
        -  (cantColor > 0);receive canalA(id):{cantColor--; send canalEnvioAll[id](lapiz)}
        -  (!empty(canalDevolucion));receive canalDevolucion(lapiz):{
                if(lapiz.color=="negro"){
                    cantNegros++;
                } else {
                    cantColor++;
                }
            }                                                                  
        end if
    }
}

Process ninoC[id: 1..N]{
    send canalC(id);
    send señales();
    receive canalEnvioColor(lapiz);
    lapiz.dibujar;
    delay(10min);
    send canalDevolucion(lapiz);
    send señales();
}

Process ninoN[id: 1..N]{
    send canalN(id);
    send señales();
    receive canalEnvioNegro(lapiz);
    lapiz.dibujar;
    delay(10min);
    send canalDevolucion(lapiz);
    send señales();
}

Process ninoA[id: 1..N]{
    send canalA(id);
    send señales();
    receive canalEnvioAll(lapiz);
    lapiz.dibujar;
    delay(10min);
    send canalDevolucion(lapiz);
    send señales();
}

b) Modificar el ejercicio para que a los niños de tipo A se les puede asignar un lápiz
sólo cuando: hay lápiz negro disponible y ningún pedido pendiente de tipo N, o si
hay lápiz de color disponible y ningún pedido pendiente de tipo C.

chan canalEnvioAll(Object lapiz);
chan canalEnvioColor(Object lapiz);
chan canalEnvioNegro(Object lapiz);
chan canalA(int);
chan canalC(int);
chan canalN(int);


Process abuela{
    cantColor = 10;
    cantNegros = 15;
    while True{

        receive señales();

        if (cantNegros > 0);receive canalN(id):{cantNegros--; send canalEnvioNegro[id](lapiz)}
        -  (cantColor > 0);receive canalC(id):{cantColor--; send canalEnvioColor[id](lapiz)}
        -  (cantNegros > 0 and empty(canalN));receive canalA(id):{cantNegros--; send canalEnvioAll[id](lapiz)}
        -  (cantColor > 0 and empty(canalC));receive canalA(id):{cantColor--; send canalEnvioAll[id](lapiz)}
        -  (!empty(canalDevolucion));receive canalDevolucion(lapiz):{
                if(lapiz.color=="negro"){
                    cantNegros++;
                } else {
                    cantColor++;
                }
            }                                                                  
        end if
    }
}

Process ninoC[id: 1..N]{
    send canalC(id);
    send señales();
    receive canalEnvioColor(lapiz);
    lapiz.dibujar;
    delay(10min);
    send canalDevolucion(lapiz);
    send señales();
}

Process ninoN[id: 1..N]{
    send canalN(id);
    send señales();
    receive canalEnvioNegro(lapiz);
    lapiz.dibujar;
    delay(10min);
    send canalDevolucion(lapiz);
    send señales();
}

Process ninoA[id: 1..N]{
    send canalA(id);
    send señales();
    receive canalEnvioAll(lapiz);
    lapiz.dibujar;
    delay(10min);
    send canalDevolucion(lapiz);
    send señales();
}


2. Suponga que N personas llegan a la cola de un banco. Para atender a las personas existen 2 empleados 
que van atendiendo de a una y por orden de llegada a las personas.

process Persona[id:0..N]{
    send canalPersonasEsperando(id);
    receive canalPasar[id]();
    //es atendido
}

process Bancarios[id:0..1]{
    while True {
        receive canalPersonasEsperando(id);
        send canalPasar[id]();
        //atiende
    }
}



3. Existen N camiones que deben descargar su carga. Los camiones se descargan de a uno por vez, y de acuerdo al
orden de llegada. 

process Camion[id:0..N]{
    send canalCamionesEsperando(id);
    receive canalPasar[id]();
    //descarga
    send canalDescargaTerminada();
}

process Administrador{
    while True {
        receive canalCamionesEsperando(id);
        send canalPasar[id]();
        //el camion descarga
        receive canalDescargaTerminada();
    }
}


4. Se desea modelar el funcionamiento de un banco en el cual existen 5 cajas para realizar
pagos. Existen P personas que desean pagar. Para esto cada una selecciona la caja donde
hay menos personas esperando; una vez seleccionada, espera a ser atendido.
NOTA: maximizando la concurrencia.

process Persona[id:0..N]{
    send canalEntrar(id);
    send pedidos();
    receive canalPasar[id](caja);
    caja.pagar();
    send canalCajaLibre[caja.id]();
}

process Administrador{
    colaPersonas caja[5];
    while True{

        receive pedidos();

        if (not empty(canalLiberar)){
            receive canalLiberar(id);
            pop(caja[id], aux);
        }


        if  (not empty(canalEntrar)){
            receive canalEntrar(id);
            cajaElegida = cajaConMenosGente(caja); //Esta funcion busca la caja con menos gente usando caja[X].size, ya que al ser colas se puede preguntar por tamaño.
            push(caja[cajaElegida], id);
            send canalCaja[cajaElegida](id);
        }
    }
}

process Caja[id:0..5]{
    while True{
        receive canalCaja[id](idPersona);
        send canalPasar[idPersona](self);

        //atiende persona

        receive canalCajaLibre[id]();
        send canalLiberar(id);
        send pedidos();
    }
}

5. En un edificio existen 3 porteros y P personas. Las personas dejan reclamos en la oficina
de los porteros que deben ser atendidos por cualquiera de ellos.
Cada portero está continuamente trabajando, si hay algún reclamo pendiente lo atiende,
sino realiza un recorrido por los pisos durante 10 minutos.
NOTA: la persona no debe esperar a que el reclamo sea atendido, ni se le debe avisar que
se resolvió.

process persona[id: 0..P]{
    send canalReclamos();
}

process Administrador{
    while True{
        receive canalPedidos(id);
        if(empty(canalReclamos)){
            respuesta = "Vacio"
        } else {
            receive canalReclamos(respuesta)
        }

        send canalPortero[id](respuesta)
    }
}

process portero[id: 0..3]{
    while True{
        send canalPedidos(id);
        receive canalPortero[id](reclamo);
        if (reclamo == "Vacio"){
            delay(10min)
        } else {
            reclamo.resolve()
        }
    }
}

6. Se debe modelar una casa de Comida Rápida, en el cual trabajan 2 cocineros y 3
vendedores. Además, hay C clientes que dejan un pedido y quedan esperando a que se lo
alcancen.
Los pedidos que hacen los clientes son tomados por cualquiera de los vendedores y se lo
pasan a los cocineros para que realicen el plato. Cuando no hay pedidos para atender, los
vendedores aprovechan para reponer un pack de bebidas de la heladera (tardan entre 1 y 3
minutos para hacer esto).
Repetidamente cada cocinero toma un pedido pendiente dejado por los vendedores, lo
cocina y se lo entrega directamente al cliente correspondiente.
Nota: maximizar la concurrencia.


chan canalPedidoCocinero(int);
chan canalPlato[C](Object plato);0
chan canalPedidosVendedor(int);
chan canalVendedor[3](int);
chan canalPedidoCliente(int);

process cocinero[id: 0..1]{
    while True{
        receive canalPedidoCocinero(idCliente);
        plato = plato.crear();
        send canalPlato[idCliente](plato);
    }
}

process vendedor[id: 0..2]{
    while True{
        send canalPedidosVendedor(id);
        receive canalVendedor[id](respuesta);
        if(respuesta = "Vacio"){
            delay(1min,3min); //entre 1 y 3 minutos
        } else {
            send canalPedidoCocinero(respuesta.idCliente);
        }
    }
}

process Administrador{
    while True{
        receive canalPedidosVendedor(id);
        if(empty(canalPedidoCliente)){
            respuesta = "Vacio"
        } else {
            receive canalPedidoCliente(respuesta)
        }

        send canalVendedor[id](respuesta);
    }
}

process cliente[id: 0..C-1]{
    send canalPedidoCliente(id);
    receive canalPlato[id](plato);
}

7. En un banco hay C Clientes que van al banco a pagar, algunas de ellos son clientes
Habituales y otros Esporádicos. En el banco hay una única caja donde se atiende a los
clientes dando siempre prioridad a los Clientes Habituales, y entre los de cada categoría
(Habitual o Esporádico) en el orden de llegada. Nota: suponga que existe una función
DarCategoría que le indica al cliente de que categoría es (Habitual o Esporádico).

process Cliente[id: 0..C-1]{
    categoria = self.DarCategoria();
    if (categoria == "Habitual"){
        send canalClienteHabitual(id);
    } else {
        send canalClienteEsporadico(id);
    }
    send canalSeñales();
    receive canalCliente[id]();

}

process Administrador{
    while True{

        receive canalSeñales();

        if (not empty(canalClienteHabitual)){
            receive canalClienteHabitual(id);
            send canalCliente[id]();
        } else {
            receive canalClienteEsporadico(id);
            send canalCliente[id]();
        }

    }
}

8. Resolver la administración de las impresoras de una oficina. Hay 3 impresoras, N usuarios y
1 director. Los usuarios y el director están continuamente trabajando y cada tanto envían
documentos a imprimir. Cada impresora, cuando está libre, toma un documento y lo
imprime, de acuerdo con el orden de llegada, pero siempre dando prioridad a los pedidos
del director. Nota: los usuarios y el director no deben esperar a que se imprima el
documento.

process usuario[id: 0..N-1]{
    while True{
        self.trabajar();
        send canalUsuario(documento);
        send canalSeñales();
    }
}

process director{
    while True{
        self.trabajar();
        send canalDirector(documento);
        send canalSeñales();
    }
}

process Impresora{
    while True{
        receive canalSeñales();

        if (not empty(canalDirector)){
            receive canalDirector(documento);
        } else {
            receive canalUsuario(documento);
        }

        documento.imprimir();
    }
}


-------------------PMS

9. En una estación de comunicaciones se cuenta con 10 radares y una unidad de
procesamiento que se encarga de procesar la información enviada por los radares. Cada
radar repetidamente detecta señales de radio durante 15 segundos y le envía esos datos a la
unidad de procesamiento para que los analice. Los radares no deben esperar a ser atendidos
para continuar trabajando.

process radares[id: 0..9]{
    delay(15);
    self.generar(dato);
    Administrador!(dato);
}

process Administrador{
    cola Buffer;
    do  radares[*]?(dato){ push (Buffer, dato) }
        - not empty(Buffer); unidad?(){unidad!(pop(Buffer,dato))} 
    od
}


process unidad{
    Administrador!();
    Administrador?(dato);
    self.procesar(dato);
}


10. Se debe modelar la atención en una panadería por parte de 3 empleados. Hay C clientes que
ingresan al negocio para ser atendidos por cualquiera de los empleados, los cuales deben
atenderse de acuerdo con el orden de llegada.

process cliente[id: 0..C-1]{
    Administrador!(id);
    empleado[*]?(pan);
}

process Administrador{
    cola Buffer;
    do  cliente[*]?(idCliente){ push (Buffer, idCliente) }
        - not empty(Buffer); empleado[*]?(idEmpleado){empleado[idEmpleado]!(pop(Buffer,idCliente))} 
    od
}


process empleado[id:0..2]{
    Administrador!(idEmpleado);
    Administrador?(idCliente);
    pan = self.generarPan();
    cliente[idCliente]!(pan);
}


11.En un laboratorio de genética veterinaria hay 3 empleados. El primero de ellos se encarga
de preparar las muestras de ADN lo más rápido posible; el segundo toma cada muestra de
ADN preparada y arma el set de análisis que se deben realizar con ella y espera el resultado
para archivarlo y continuar trabajando; el tercer empleado se encarga de realizar el análisis y
devolverle el resultado al segundo empleado. 


process preparador{
    while True{
        muestra.preparar();
        armador!enviarMuestra(muestra);
    }
}

process armador{
    do  preparador?enviarMuestra(muestra);{ muestra.preparar(); administrador!almacenarMuestra(muestra); }
    -   analizador?muestraAnalizada(muestra);{muestra.terminar()}
    od
}

process administrador{
    cola Buffer;
    do  armador?almacenarMuestra(muestra){ push (Buffer, muestra) }
        - not empty(Buffer); analizador?tomarParaAnalisis(){ analizador!tomarParaAnalisis(pop(Buffer,muestra)) } 
    od
}

process analizador{
    while True{
        administrador!tomarParaAnalisis();
        administrador?tomarParaAnalisis(muestra);
        muestra.analizar();
        armador!muestraAnalizada(muestra);
    }
}


12.Existen N pacientes que van al consultorio de UN médico el cual los atiende de acuerdo
con el orden de llegada. Cada paciente espera a que el médico le haga la receta con los
medicamentos y luego se dirige a la Farmacia a comprarlos, espera a que lo terminen de
atender y se retira. En la Farmacia hay UN empleado que atiende a la gente de acuerdo con
el orden de llegada.

process paciente[id: 0..N-1]{
    administradorPM!(id);
    medico?(receta);
    obj.id = id;
    obj.receta = receta;
    administradorPE!(obj);
    empleado?(medicamentos);
}

process administradorPM{
    cola Buffer;
    do  paciente?(id){ push (Buffer, id) }
        - not empty(Buffer); medico?(){ medico!(pop(Buffer, id)) } 
    od
}

process medico{
    administradorPM!();
    administradorPM?(id);
    //hace la receta
    paciente[id]!(receta);
}

process administradorPE{
    cola Buffer;
    do  paciente?(obj){ push (Buffer, obj) }
        - not empty(Buffer); empleado?(){ empleado!(pop(Buffer, obj)) } 
    od
}

process empleado{
    administradorPE!();
    administradorPE?(obj);
    //agarra los medicamentos
    paciente[obj.id]!(medicamentos);
}

13.Suponga que existe un antivirus distribuido en él hay R procesos robots que continuamente
están buscando posibles sitios web infectados; cada vez que encuentran uno avisan la
dirección y continúan buscando. Hay un proceso analizador que se encargue de hacer todas
las pruebas necesarias con cada uno de los sitios encontrados por los robots para
determinar si están o no infectados.

process robot[id: 0..R-1]{
    //busca virus
    administrador!(virus);
}

process administrador{
    cola Buffer;
    do  robot[*]?(virus){ push (Buffer, virus) }
        - not empty(Buffer); analizador?(){ analizador!(pop(Buffer, virus)) } 
    od
}

process analizador{
    administrador!();
    administrador?(virus);
    virus.analizar();
}