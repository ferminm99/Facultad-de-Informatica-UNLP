a. ¿El código funciona correctamente? Justifique su respuesta.
No, tiene 1 error, y es que no se respeta el orden de llegada. Cuando 
uno le hace un signal el proceso esperando queda compitiendo por el monitor, 
por lo que le puede ganar esa competencia otro proceso.

b. ¿Se podría simplificar el programa? En caso afirmativo, rescriba el código.

Monitor Puente{
    cond cola;
    int esperando= 0;
    bool libre = true;

    Procedure entrarPuente (int au){
        if(!libre) {
            esperando++; 
            wait(cola);
        } else {
            libre = false;
        }
    }

    Procedure salirPuente (int au){
        if(esperando > 0){
            esperando--;
            signal(cola);
        } else {
            libre = true;
        }
    }
}

Process Auto [a:1..M]
    Puente. entrarPuente (a);
    “el auto cruza el puente”
    Puente. salirPuente(a);
End Process;

c. ¿La solución original respeta el orden de llegada de los vehículos? Si rescribió el código
en el punto b), ¿esa solución respeta el orden de llegada?
No. Si.

2. Implementar el acceso a una base de datos de solo lectura que puede atender a lo sumo 5
consultas simultáneas.

Monitor Base{
    cond cola;
    int esperando= 0;
    int enBase = 0;

    Procedure entrarBase (int au){
        if(enBase >= 5) {
            esperando++; 
            wait(cola);
        } else {
            enBase++;
        }
    }

    Procedure salirBase (int au){
        if(esperando > 0){
            esperando--;
            signal(cola);
        } else {
            enBase--;
        }
    }
}

Process Lector [id:1..N]
    Base.entrarBase (id);
    "lee la base”
    Base.salirBase(id);
End Process;

3. En un laboratorio de genética se debe administrar el uso de una máquina secuenciadora de
ADN. Esta máquina se puede utilizar por una única persona a la vez. Existen 100 personas
en el laboratorio que utilizan repetidamente esta máquina para sus estudios, para esto cada
persona pide permiso para usarla, y cuando termina el análisis avisa que termino. Cuando la
máquina está libre se le debe adjudicar a aquella persona cuyo pedido tiene mayor prioridad
(valor numérico entre 0 y 100).

Monitor maquina{
    cond cola[100];
    colaOrdenada ordenada;
    bool libre = true;

    Procedure entrar (persona){
        if(!libre) {
            push(ordenada, persona.id, persona.prioridad);
            wait(cola[id]);
        } else {
            libre = false;
        }
    }

    Procedure salir(){
        if(!empty(ordenada)){
            pop(ordenada,id);
            signal(cola[id]);
        } else {
            libre = true;
        }
    }
}

Process Persona [id:1..100]
    maquina.entrar(self);
    "lee la base”
    maquina.salir();
End Process;

4. Suponga que N personas llegan a la cola de un banco. Una vez que la persona se agrega en la
cola no espera más de 15 minutos para su atención, si pasado ese tiempo no fue atendida se
retira. Para atender a las personas existen 2 empleados que van atendiendo de a una y por
orden de llegada a las personas.

Monitor administrador{
    colaEspecial colaGeneral;
    cond esperandoEmpleado[N];

    Procedure llegue(){
        push(colaGeneral, id);
        signal(esperandoCliente);
        wait(esperandoEmpleado[id]);
    }

    Procedure atender(){
        if(isEmpty(colaGeneral)){
            wait(esperandoCliente);
        }
        pop(colaGeneral, id); 
        //atiende al id
        signal(esperandoEmpleado[id]);
    }

    Procedure timeOut(id){
        sacar(colaGeneral, id); //saca el id de la cola sin importar la posicion en la que esta
        signal(esperandoEmpleado[id]);
    }

}

Monitor personal[1..N]{
    cond esperandoPersona;
    bool llego = false;

    Procedure iniciarClock(){
        if(!llego){
            wait(esperandoPersona);
        }
        delay(15min);
        administrador.timeOut(id);
    }

    Procedure avisarLlegada(){
        llego = true;
        signal(esperandoPersona);
    }

}

Process clock[id:1..N]{
    personal[id].iniciarClock();
}

Process persona[id:1..N]{
    personal[id].avisarLlegada();
    administrador.llegue(id);
}

Process empleado[id:0..1]{
    while(True){
        administrador.atender();
    }
}

5. Se tiene una oficina de registros que atiende un único empleado, existen C clientes que cuando
llegan se encolan para ser atendidos por el empleado, mientras esperan para ser atendidos
toman una planilla y la llenan para ganar tiempo, luego que completaron la planilla esperan a
que los llame el empleado, al momento de la atención el cliente le da la planilla al empleado,
este carga los datos y le entrega un comprobante de registro. 


Monitor administrador{
    cola colaClientes;
    cond esperarCliente;
    bool empleadoListo = false;
    cond esperarAtencion;
    cond planillaCliente[C];
    cond condComprobante;

    Procedure llegoCliente(id){
        push(colaClientes, id);
        signal(esperarCliente);
    }

    Procedure atenderCliente(){
        if(!isEmpty(colaClientes)){
            wait(esperarCliente);
        }
        pop(colaClientes, id);
        empleadoListo = true;
        signal(esperarAtencion);
        wait(planillaCliente[id]);

        //genera comprobante
        signal(condComprobante)
    }

    Procedure terminoPlanilla(id){
        if(!empleadoListo){
            wait(esperarAtencion);
        }
        empleadoListo = false;
        signal(planillaCliente[id])
        wait(condComprobante);
    }

}


Process empleado{
    while(True){
        administrador.atenderCliente();
    }
}

Process cliente[id: 1..C]{
    administrador.llegoCliente(id);
    planilla.hacer(); //tiempo indeterminado
    administrador.terminoPlanilla(id);
    administrador.entregarPlanilla(id);
}

6. En una casa viven una abuela y sus N nietos. Además la abuela compró caramelos que quiere convidar entre sus nietos. Inicialmente la abuela deposita en una fuente X caramelos, luego cada nieto intenta comer caramelos de la siguiente manera: si la fuente tiene caramelos el nieto
agarra uno de ellos, en el caso de que la fuente esté vacía entonces se le avisa a la abuela quien repone nuevamente X caramelos. Luego se debe permitir que el nieto que no pudo comer sea el primero en hacerlo, es decir, el primer nieto que puede comer nuevamente es el primero que encontró la fuente vacía.
NOTA: siempre existen caramelos para reponer. Cada nieto tarda t minutos en comer un
caramelo (t no es igual para cada nieto). Puede haber varios nietos comiendo al mismo tiempo.


Monitor administrador{

    int bolsaDeCaramelos;

    Procedure depositarCaramelos{
        bolsaDeCaramelos = X; //llena la bolsa
        signal(esperandoRelleno);
        wait(rellenarCaramelos);
    }

    Procedure tomarCaramelo(){
        if(estanRellenando){wait(esperandoBolsa);}
        if(bolsaDeCaramelos == 0){
            estanRellenando = true;
            signal(rellenarCaramelos);
            wait(esperandoRelleno);
            estanRellenando = false;
            signal_all(esperandoBolsa);
        }
        bolsaDeCaramelos--;
    }

}

Process abuela{
    while(True){
        administrador.depositarCaramelos();
    }
}

Process nieto[id: 1..N]{
    while(True){
        administrador.tomarCaramelo();
        delay(t);
    }
}

7. En un entrenamiento de futbol hay 20 jugadores que forman 4 equipos (cada jugador conoce
el equipo al cual pertenece llamando a la función DarEquipo()). Cuando un equipo está listo
(han llegado los 5 jugadores que lo componen), debe enfrentarse a otro equipo que también
esté listo (los dos primeros equipos en juntarse juegan en la cancha 1, y los otros dos equipos
juegan en la cancha 2). Una vez que el equipo conoce la cancha en la que juega, sus jugadores
se dirigen a ella. Cuando los 10 jugadores del partido llegaron a la cancha comienza el partido,
juegan durante 50 minutos, y al terminar todos los jugadores del partido se retiran (no es
necesario que se esperen para salir).



Monitor administrador{
    int vec_equipos[4] = 0;
    cond esperarEquipo[4];
    int equiposCancha[4] = 0;
    cola equiposListos;
    cond esperandoRival;
    canchaLibre = 1;
    int esperandoPartido[2];
    cond esperandoJugar[2];
    cond esperandoArranque[2];
    bool hayGenteEnCancha[2];


    Procedure llegue(numEquipo){
        vec_equipos[numEquipo]++;
        if(vec_equipos[numEquipo] < 5){
            wait(esperarEquipo[numEquipo]);
        }
    }

    Procedure esperarRival(miEquipo){
        if(equiposCancha[miEquipo] == 0){
            if(isEmpty(equiposListos)){
                push(equiposListos, miEquipo);
                wait(esperandoRival);
            } else {
                pop(equiposListos, equipoRival);
                signal(esperandoRival);
                equiposCancha[miEquipo] = canchaLibre;
                equiposCancha[equipoRival] = canchaLibre;
                signal_all(esperarEquipo[miEquipo]);
                signal_all(esperarEquipo[equipoRival]);
                canchaLibre++;
            }
        }
    }

    Procedure esperoCancha(equipo){
        cancha = equiposCancha[equipo];
        esperandoPartido[cancha]++;
        if(esperandoPartido[cancha] < 10){
            wait(esperandoJugar[cancha]);
        } else {
            signal(esperandoArranque[cancha]);
            hayGenteEnCancha[cancha] = true;
            wait(esperandoJugar[cancha]);
        }
    }

    Procedure esperarJugadores{
        if(!hayGenteEnCancha[cancha]){
            wait(esperandoArranque[cancha]);
        }
    }

    Procedure terminarPartido{
        signal_all(esperandoJugar[cancha]);
    }

}

Process jugadores[id:1..20]{
    equipo = DarEquipo();
    administrador.llegue(equipo);
    administrador.esperarRival(equipo);
    administrador.esperoCancha(equipo);
    administrador.jugar(equipo);
}

Process partido[cancha: 1..2]{
    administrador.esperarJugadores(cancha);
    delay(50min);
    administrador.terminarPartido(cancha);
}

8. Suponga una comisión con 50 alumnos. Cuando los alumnos llegan forman una fila, una vez
que están los 50 en la fila el jefe de trabajos prácticos les entrega el número de grupo (número
aleatorio del 1 al 25) de tal manera que dos alumnos tendrán el mismo número de grupo
(suponga que el jefe posee una función DarNumero() que devuelve en forma aleatoria un
número del 1 al 25, el jefe de trabajos prácticos no guarda el número que le asigna a cada
alumno). Cuando un alumno ha recibido su número de grupo comienza a realizar la práctica.
Al terminar de trabajar, el alumno le avisa al jefe de trabajos prácticos y espera la nota. El jefe
de trabajos prácticos, cuando han llegado los dos alumnos de un grupo les devuelve a ambos
la nota del GRUPO (el primer grupo en terminar tendrá como nota 25, el segundo 24, y así
sucesivamente hasta el último que tendrá nota 1).





Monitor administrador{
    cond esperandoPorNumero;
    cond esperandoAlumnos;
    int alumnosEnEspera = 0;
    cola filaDeAlumnos;
    int entregas[25] = 0;
    cola practicas;
    cond esperandoNota[25];
    int gruposEsperando = 0;
    cond esperandoParaCorregir;
    int resultados[25];

    

    Procedure llegoAlumno(id){
        alumnosEnEspera++;
        push(filaDeAlumnos, id);
        if(alumnosEnEspera == 50){
            signal(esperandoAlumnos);
        }
        wait(esperandoPorNumero);
    }

    Procedure esperarFila{
        if(alumnosEnEspera < 50){
            wait(esperandoAlumnos);
        }
    }

    Procedure darNumero(){
        pop(filaDeAlumnos, alumno); //funciona como una cola
        alumno.numero = DarNumero();
        signal(esperandoAlumnos);
    }

    Procedure entregarPractica(alumno){
        entregas[alumno.grupo]++;
        if(entregas[alumno.grupo] == 2){
            push(practicas, alumno.practica);
            gruposEsperando++;
            signal(esperandoParaCorregir);
        }
        wait(esperandoNota[numeroGrupo]);
        alumno.nota = resultados[alumno.grupo];
    }

    Procedure corregir(nota){
        if(gruposEsperando == 0){
            wait(esperandoParaCorregir);
        }
        pop(practicas, practica);
        gruposEsperando--;
        //corrige
        resultados[practica.grupo] = nota;
        signal_all(esperandoNota[practica.grupo]);
    }


}

Process jtp{
    int nota = 25;
    administrador.esperarFila();
    for i = 1 to 50 {
        administrador.darNumero();
    }
    while(nota > 0){
        administrador.corregir(nota);
        nota--;
    }
}

Process alumno[id: 1..50]{
    administrador.llegoAlumno(id);
    //resuelve la practica
    administrador.entregarPractica(self);
}

9. Hay N vehículos (cada uno tiene su propio peso) que deben pasar por un puente de acuerdo
al orden de llegada, pero el puente no soporta más de 50000kg. Nota: maximizar
concurrencia. Suponga que ningún vehículo supera el peso soportado por el puente.

Monitor administrador{
    pesoRestante = 50000;
    cond esperoParaPasar;
    int pesoDelProximo = 60000;
    int vehiculosEsperando = 0;


    Procedure pasar(vehiculo){
        if(pesoRestante - vehiculo.peso < 0 or vehiculosEsperando > 0){
            vehiculosEsperando++;
            push(colaDeVehiculos, vehiculo);
            signal(esperandoEntrada)
            wait(esperoParaPasar);
        } else {
            pesoRestante = pesoRestante - vehiculo.peso;
        }
    }

    Procedure proximo(){
        if(vehiculosEsperando > 0){
            pop(colaDeVehiculos, vehiculo);
            pesoDelProximo = vehiculo.peso;
        }
        while(pesoRestante - pesoDelProximo >= 0){
            signal(esperoParaPasar);
            vehiculosEsperando--;
            pesoRestante = pesoRestante - vehiculo.peso;
            if(vehiculosEsperando > 0){
                pop(colaDeVehiculos, vehiculo);
                pesoDelProximo = vehiculo.peso;
            }
        }
        wait(elProximoNoEntra);
    }

    Procedure salir(vehiculo){
        pesoRestante = pesoRestante + vehiculo.peso;
        signal(elProximoNoEntra);
    }


}

Process puente{
    while(True){
        administrador.proximo();
    }
}

Process vehiculo[id: 1..N]{
    administrador.pasar(self);
    //pasa por el puente
    administrador.salir(self);
}






backup------------------------------------------------


Monitor administrador{
    pesoRestante = 50000;
    cond esperoParaPasar;
    int pesoDelProximo = 60000;
    int vehiculosEsperando = 0;


    Procedure pasar(vehiculo){
        if(pesoRestante - vehiculo.peso < 0 or vehiculosEsperando > 0){
            vehiculosEsperando++;
            push(colaDeVehiculos, vehiculo);
            signal(esperandoEntrada)
            wait(esperoParaPasar);
        } else {
            pesoRestante = pesoRestante - vehiculo.peso;
        }
    }

    Procedure proximo(){
        if(vehiculosEsperando > 0 and pesoDelProximo == 60000){
            pop(colaDeVehiculos, vehiculo);
            pesoDelProximo = vehiculo.peso;
        }
        while(pesoRestante - pesoDelProximo >= 0){
            signal(esperoParaPasar);
            vehiculosEsperando--;
            pesoRestante = pesoRestante - vehiculo.peso;
            if(vehiculosEsperando > 0){
                pop(colaDeVehiculos, vehiculo);
                pesoDelProximo = vehiculo.peso;
            } else {
                pesoDelProximo = 60000;
            }
        }
        wait(elProximoNoEntra);
    }

    Procedure salir(vehiculo){
        pesoRestante = pesoRestante + vehiculo.peso;
        signal(elProximoNoEntra);
    }


}

Process puente{
    while(True){
        administrador.proximo();
    }
}

Process vehiculo[id: 1..N]{
    administrador.pasar(self);
    //pasa por el puente
    administrador.salir(self);
}
