TestCase subclass: #SetUp	instanceVariableNames: 'preg1 preg2 preg3 top1 top2 res1 res2 res3 res4 res5 usu1 usu2 usu3 usu4 lista1 lista2 lista3'	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-Tests'!!SetUp methodsFor: 'running' stamp: 'lautaro 5/7/2020 19:59'!setUp	usu1 := Usuario nombre: 'Lautaro' contraseña: '123'.	usu2 := Usuario nombre: 'Fermin' contraseña: '12345'.	usu3 := Usuario nombre: 'Alejo' contraseña: 'passwd'.	usu4 := Usuario nombre: 'Thomas' contraseña: 'passwd123'.	top1 := Topico nombre: 'IIformatica' descripcion: 'Hardware y Software en general'.	top2 := Topico nombre: 'Videojuegos' descripcion: 'Noticias y dudas generales'.	lista1 := OrderedCollection new. lista1 add: top1.	preg1 := Pregunta texto: '¿Que procesador me recomiendan con una gtx 1060?' titulo: 'Armando mi pc' usuario: usu1 topicos: lista1.	lista2 := OrderedCollection new. lista2 add: top1. lista2 add: top2.	preg2 := Pregunta texto: '¿Con que grafica me recomiendan jugar Red Dead Redemption 2?' titulo: 'Red Dead Redemption 2'  usuario: usu2 topicos: lista2.	lista3 := OrderedCollection new. lista3 add: top2.	preg3 := Pregunta texto: 'Ayuda con la mision The Eyes of Skettis de wow 3.3.5a' titulo: 'Mision de World of Warcraft' usuario: usu2 topicos: lista3. 	res1 := Respuesta texto: 'Yo diria que un ryzen 5 2600 o ryzen 5 3600 irian muy bien' usuario: usu1 pregunta: preg1.	res2 := Respuesta texto: 'Optaria por un intel, un i3 8100 o un i5 8400' usuario: usu2 pregunta: preg1.	res3 := Respuesta texto: 'Para jugarlo decente iria por una 1060 en adelante en nvidia o su equivalente en amd la rx 580' usuario: usu1 pregunta: preg2.	res4 := Respuesta texto: 'Eye of Veil Reskk: parte superior de la torre a partir de 49, 16 y luego cruzar el puente (50, 19)' usuario: usu3 pregunta: preg3.	res5 := Respuesta texto: 'Para el Eye of Veil Shienor en 59, 25, debes ir al árbol para subirlo. Hay un pequeño túnel que comienza en la base del árbol' usuario: usu2 pregunta:preg3.! !SetUp subclass: #TestPregunta	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-Tests'!!TestPregunta methodsFor: 'test' stamp: 'lautaro 5/6/2020 17:17'!testBorrarRespuestas	preg1 agregarRespuesta: res1.	preg1 agregarRespuesta: res2.  	self assert: (preg1 respuestas) size equals: 2.	preg1 borrarRespuestas.	self assert: (preg1 respuestas) size equals: 0. 	self assert: (preg1 respuestas includes: res1) equals: false.	self assert: (preg1 respuestas includes: res2) equals: false.! !!TestPregunta methodsFor: 'test' stamp: 'lautaro 5/6/2020 16:58'!testAgregarRespuesta 	self assert: (preg1 respuestas) size equals: 0.	preg1 agregarRespuesta: res1. 	self assert: (preg1 respuestas) size equals: 1.	self assert: (preg1 respuestas includes: res1) equals: true.! !!TestPregunta methodsFor: 'test' stamp: 'lautaro 5/6/2020 16:36'!testDiferenciaVotos	preg1 votarPositivo: usu2.	preg1 votarPositivo: usu3.	self assert: (preg1 diferenciaVotos) equals: 2. 	preg1 votarNegativo: usu1.	self assert: (preg1 diferenciaVotos) equals: 1. 	preg1 votarPositivo: usu1.	self assert: (preg1 diferenciaVotos) equals: 3. 	preg1 votarNegativo: usu2.	preg1 votarNegativo: usu1.	self assert: (preg1 diferenciaVotos) equals: -1.! !!TestPregunta methodsFor: 'test' stamp: 'lautaro 5/7/2020 17:34'!testOrdenar	|resultado|	preg1 agregarRespuesta: res1.	preg1 agregarRespuesta: res2.	preg1 agregarRespuesta: res3.	preg1 agregarRespuesta: res4.	preg1 agregarRespuesta: res5. 	res5 votarPositivo: usu1.	res5 votarPositivo: usu2.	res5 votarPositivo: usu3.	res5 votarPositivo: usu4.	res2 votarPositivo: usu1.	res2 votarPositivo: usu2.	res2 votarPositivo: usu3.	res1 votarPositivo: usu1.	res1 votarPositivo: usu2.	res3 votarPositivo: usu1.	res4 votarNegativo: usu1.	res4 votarNegativo: usu2.	"res5 4V / res2 3V / res1 2V / res3 1V / res4 -2V"	resultado := OrderedCollection new.	resultado addFirst: res4. resultado addFirst: res3. resultado addFirst: res1. resultado addFirst: res2. resultado addFirst: res5. 	self assert: (preg1 respuestasOrdenadas) equals: resultado.! !SetUp subclass: #TestRespuesta	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-Tests'!!TestRespuesta methodsFor: 'test' stamp: 'lautaro 5/7/2020 16:53'!testDiferenciaVotos	res1 votarPositivo: usu2.	res1 votarPositivo: usu3.	self assert: (res1 diferenciaVotos) equals: 2. 	res1 votarNegativo: usu1.	self assert: (res1 diferenciaVotos) equals: 1. 	res1 votarPositivo: usu1.	self assert: (res1 diferenciaVotos) equals: 3. 	res1 votarNegativo: usu2.	res1 votarNegativo: usu1.	self assert: (res1 diferenciaVotos) equals: -1.! !!TestRespuesta methodsFor: 'test' stamp: 'lautaro 5/7/2020 16:55'!testVotarNegativo	self assert: (res1 votosNegativos) size equals: 0.	res1 votarNegativo: usu1.	self assert: (res1 votosNegativos) size equals: 1.	res1 votarNegativo: usu1.	self assert: (res1 votosNegativos) size equals: 1.	res1 votarNegativo: usu2.	self assert: (res1 votosNegativos) size equals: 2.! !!TestRespuesta methodsFor: 'test' stamp: 'lautaro 5/7/2020 16:55'!testVotarPositivo	self assert: (res1 votosPositivos) size equals: 0.	res1 votarPositivo: usu1.	self assert: (res1 votosPositivos) size equals: 1.	res1 votarPositivo: usu1.	self assert: (res1 votosPositivos) size equals: 1.	res1 votarPositivo: usu2.	self assert: (res1 votosPositivos) size equals: 2.! !SetUp subclass: #TestSistema	instanceVariableNames: 'sistema'	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-Tests'!!TestSistema methodsFor: 'test' stamp: 'lautaro 5/6/2020 17:20'!testAgregarTopico	self assert: (sistema topicos) size equals: 0.	sistema agregarTopico: top1.	self assert: (sistema topicos) size equals: 1.	self assert: (sistema topicos includes: top1) equals: true.! !!TestSistema methodsFor: 'test' stamp: 'lautaro 5/6/2020 17:19'!testAgregarRespuesta	self assert: (usu2 respuestas) size equals: 0.	sistema agregarRespuesta: res2 pregunta: preg1. 	self assert: (usu2 respuestas) size equals: 1.	self assert: (usu2 respuestas includes: res2) equals: true.	sistema agregarRespuesta: res5 pregunta: preg2.	self assert: (usu2 respuestas) size equals: 2. 	self assert: (usu2 respuestas includes: res5) equals: true.! !!TestSistema methodsFor: 'test' stamp: 'lautaro 5/6/2020 20:59'!testPreguntasPorTopico	self assert: (sistema preguntasPorTopico: top1) size equals: 0.	sistema agregarPregunta: preg1 topicos: lista1.	self assert: (sistema preguntasPorTopico: top1) size equals: 1.	self assert: ((sistema preguntasPorTopico: top1) includes: preg1) equals: true.	sistema agregarPregunta: preg2 topicos: lista2.	self assert: (sistema preguntasPorTopico: top1) size equals: 2.	self assert: ((sistema preguntasPorTopico: top1) includes: preg2) equals: true.	self assert: (sistema preguntasPorTopico: top2) size equals: 1.	self assert: ((sistema preguntasPorTopico: top2) includes: preg2) equals: true.! !!TestSistema methodsFor: 'test' stamp: 'lautaro 5/6/2020 17:16'!testAgregarPregunta	self assert: (top1 preguntas) size equals: 0.	sistema agregarPregunta: preg1 topicos: lista1.	self assert: (top1 preguntas) size equals: 1.	self assert: (top1 preguntas includes: preg1) equals: true.	sistema agregarPregunta: preg2 topicos: lista2.	self assert: (top1 preguntas) size equals: 2.	self assert: (top1 preguntas includes: preg2) equals: true.	self assert: (top2 preguntas) size equals: 1.	self assert: (top2 preguntas includes: preg2) equals: true.! !!TestSistema methodsFor: 'test' stamp: 'lautaro 5/6/2020 20:56'!testPreguntasDeUsuario	self assert: (usu1 preguntas) size equals: 0.	sistema agregarPregunta: preg1 topicos: lista1. 	self assert: (usu1 preguntas) size equals: 1.	self assert: (usu1 preguntas includes: preg1) equals: true.! !!TestSistema methodsFor: 'test' stamp: 'lautaro 5/7/2020 16:24'!testBorrarPregunta	sistema crearUsuario: usu1.	sistema crearUsuario: usu2.	sistema agregarTopico: top1.	sistema agregarTopico: top2.	sistema agregarPregunta: preg1 topicos: lista1. 	self assert: (sistema preguntasPorTopico: top1) size equals: 1.	self assert: ((sistema preguntasPorTopico: top1) includes: preg1) equals: true. 	sistema borrarPregunta: preg1.	self assert: (sistema preguntasPorTopico: top1) size equals: 0.	self assert: ((sistema preguntasPorTopico: top1) includes: preg1) equals: false. 	sistema agregarPregunta: preg1 topicos: lista1.	sistema agregarPregunta: preg2 topicos: lista2.  	self assert: (sistema preguntasPorTopico: top1) size equals: 2. 	sistema borrarPregunta: preg1.	sistema borrarPregunta: preg2.	self assert: (sistema preguntasPorTopico: top1) size equals: 0.	self assert: ((sistema preguntasPorTopico: top1) includes: preg1) equals: false. 	self assert: ((sistema preguntasPorTopico: top1) includes: preg2) equals: false. ! !!TestSistema methodsFor: 'test' stamp: 'lautaro 5/6/2020 20:56'!testCrearUsuario	self assert: (sistema usuarios) size equals: 0.	sistema crearUsuario: usu1.	self assert: (sistema usuarios) size equals: 1.	self assert: (sistema usuarios includes: usu1) equals: true.! !!TestSistema methodsFor: 'running' stamp: 'lautaro 5/6/2020 17:06'!setUp	super setUp.	sistema := Sistema new.! !SetUp subclass: #TestTopico	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-Tests'!!TestTopico methodsFor: 'test' stamp: 'lautaro 5/7/2020 16:49'!testAgregarPregunta 	self assert: (top1 preguntas) size equals: 0.	self assert: (top2 preguntas) size equals: 0.	top1 agregarPregunta: preg1.	top2 agregarPregunta: preg2.	self assert: (top1 preguntas) size equals: 1.	self assert: (top2 preguntas) size equals: 1.	self assert: ((top1 preguntas) includes: preg1) equals: true.	self assert: ((top2 preguntas) includes: preg2) equals: true.! !!TestTopico methodsFor: 'test' stamp: 'lautaro 5/7/2020 16:51'!testBorrarPregunta 	top1 agregarPregunta: preg1.	top2 agregarPregunta: preg2.	self assert: (top1 preguntas) size equals: 1.	self assert: (top2 preguntas) size equals: 1.	self assert: ((top1 preguntas) includes: preg1) equals: true.	self assert: ((top2 preguntas) includes: preg2) equals: true.	top1 borrarPregunta: preg1.	top2 borrarPregunta: preg2.	self assert: (top2 preguntas) size equals: 0.	self assert: (top1 preguntas) size equals: 0.	self assert: ((top1 preguntas) includes: preg1) equals: false.	self assert: ((top2 preguntas) includes: preg2) equals: false.! !SetUp subclass: #TestUsuario	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-Tests'!!TestUsuario methodsFor: 'test' stamp: 'lautaro 5/7/2020 17:41'!testPreguntasRelevantes 	self assert: (usu1 preguntasRelevantes) size equals: 0.	usu1 seguir: usu2.	usu2 agregarPregunta: preg2.	self assert: (usu1 preguntasRelevantes) size equals: 1.	self assert: ((usu1 preguntasRelevantes) includes: preg2) equals: true.	usu1 agregarTopicoInteres: top2.	top2 agregarPregunta: preg3.	self assert: (usu1 preguntasRelevantes) size equals: 2.	self assert: ((usu1 preguntasRelevantes) includes: preg3) equals: true.	usu1 agregarTopicoInteres: top1.	top1 agregarPregunta: preg1.	self assert: (usu1 preguntasRelevantes) size equals: 3.	self assert: ((usu1 preguntasRelevantes) includes: preg1) equals: true.	top2 agregarPregunta: preg1.	self assert: (usu1 preguntasRelevantes) size equals: 3.! !!TestUsuario methodsFor: 'test' stamp: 'lautaro 5/7/2020 17:32'!testAgregarRespuesta	self assert: (usu1 respuestas) size equals: 0.	usu1 agregarRespuesta: res1.	self assert: (usu1 respuestas) size equals: 1.	self assert: ((usu1 respuestas) includes: res1) equals: true.	usu1 agregarRespuesta: res2.	self assert: (usu1 respuestas) size equals: 2. 	self assert: ((usu1 respuestas) includes: res2) equals: true.	! !!TestUsuario methodsFor: 'test' stamp: 'lautaro 5/7/2020 17:35'!testPregUsuariosSeguidos	self assert: (usu1 pregUsuariosSeguidos) size equals: 0.	usu1 seguir: usu2.	usu2 agregarPregunta: preg1.	self assert: (usu1 pregUsuariosSeguidos) size equals: 1. 	self assert: ((usu1 pregUsuariosSeguidos) includes: preg1) equals: true.	usu1 seguir: usu3.	usu3 agregarPregunta: preg3.	self assert: (usu1 pregUsuariosSeguidos) size equals: 2.	self assert: ((usu1 pregUsuariosSeguidos) includes: preg3) equals: true.! !!TestUsuario methodsFor: 'test' stamp: 'lautaro 5/7/2020 17:38'!testPreguntasDeInteres	self assert: (usu1 preguntasDeInteres) size equals: 0.	usu1 agregarTopicoInteres: top1.	top1 agregarPregunta: preg1.	self assert: (usu1 preguntasDeInteres) size equals: 1.	self assert: ((usu1 preguntasDeInteres) includes: preg1) equals: true.	top1 agregarPregunta: preg2.	self assert: (usu1 preguntasDeInteres) size equals: 2.	self assert: ((usu1 preguntasDeInteres) includes: preg2) equals: true.! !!TestUsuario methodsFor: 'test' stamp: 'lautaro 5/7/2020 17:29'!testAgregarPregunta	self assert: (usu1 preguntas) size equals: 0.	usu1 agregarPregunta: preg1.	self assert: (usu1 preguntas) size equals: 1.	self assert: ((usu1 preguntas) includes: preg1) equals: true.	usu1 agregarPregunta: preg2.	self assert: (usu1 preguntas) size equals: 2.	self assert: ((usu1 preguntas) includes: preg2) equals: true.! !!TestUsuario methodsFor: 'test' stamp: 'lautaro 5/7/2020 17:32'!testAgregarTopicoInteres	self assert: (usu1 topicos) size equals: 0.	usu1 agregarTopicoInteres: top1.	self assert: (usu1 topicos) size equals: 1.	self assert: ((usu1 topicos) includes: top1) equals: true.	! !!TestUsuario methodsFor: 'test' stamp: 'lautaro 5/7/2020 17:33'!testDejarDeSeguir	self assert: (usu1 usuariosSeguidos) size equals: 0.	usu1 seguir: usu2.	self assert: (usu1 usuariosSeguidos) size equals: 1. 	self assert: ((usu1 usuariosSeguidos) includes: usu2) equals: true.	usu1 dejarDeSeguir: usu2.	self assert: (usu1 usuariosSeguidos) size equals: 0. 	self assert: ((usu1 usuariosSeguidos) includes: usu2) equals: false.! !!TestUsuario methodsFor: 'test' stamp: 'lautaro 5/7/2020 18:37'!testPuntaje! !!TestUsuario methodsFor: 'test' stamp: 'lautaro 5/7/2020 17:41'!testSeguir	self assert: (usu1 usuariosSeguidos) size equals: 0.	usu1 seguir: usu2.	self assert: (usu1 usuariosSeguidos) size equals: 1. 	self assert: ((usu1 usuariosSeguidos) includes: usu2) equals: true.	! !WAComponent subclass: #AccessGrantingComponent	instanceVariableNames: 'name password'	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-UI'!!AccessGrantingComponent methodsFor: 'rendering' stamp: 'FerminMoreno 4/10/2020 11:01'!renderInputElementsOn: aCanvas	aCanvas label: 'Name'.	aCanvas paragraph: [ aCanvas textInput on: #name of: self ].	aCanvas label: 'Password'.	aCanvas paragraph: [ aCanvas passwordInput on: #password of: self ]! !!AccessGrantingComponent methodsFor: 'rendering' stamp: 'Casco 4/5/2020 10:41'!renderButtonsOn: aCanvas	self subclassResponsibility! !!AccessGrantingComponent methodsFor: 'rendering' stamp: 'lautaro 5/6/2020 19:39'!renderContentOn: aCanvas	aCanvas form: [ self renderInputElementsOn: aCanvas.	self renderButtonsOn: aCanvas. ]! !!AccessGrantingComponent methodsFor: 'private' stamp: 'lautaro 4/10/2020 21:41'!proceedWith: aUser	self session user: aUser.	self call: HomeComponent new! !!AccessGrantingComponent methodsFor: 'model' stamp: 'FerminMoreno 4/10/2020 14:50'!model	^ Sistema soleInstance! !!AccessGrantingComponent methodsFor: 'accessing' stamp: 'FerminMoreno 4/10/2020 14:53'!name: n	name:= n! !!AccessGrantingComponent methodsFor: 'accessing' stamp: 'Casco 4/4/2020 21:28'!password: anObject	password := anObject! !!AccessGrantingComponent methodsFor: 'accessing' stamp: 'lautaro 5/6/2020 20:42'!name 	^name.! !!AccessGrantingComponent methodsFor: 'accessing' stamp: 'Casco 4/4/2020 21:28'!password	^ password! !WAComponent subclass: #HeaderComponent	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-UI'!!HeaderComponent methodsFor: 'callback' stamp: 'lautaro 5/7/2020 17:42'!openUser: u	self call: (NewOpenUserComponent user:u).! !!HeaderComponent methodsFor: 'callback' stamp: 'lautaro 4/14/2020 20:18'!login	self call: LoginComponent new.! !!HeaderComponent methodsFor: 'rendering' stamp: 'lautaro 4/14/2020 20:18'!renderHeaderOn: aCanvas	aCanvas heading: 'CuOOra '.	aCanvas text: self session user nombre.	aCanvas space.	aCanvas space.   aCanvas anchor callback: [ self login. ]; with: [ aCanvas button with: 'Logout' ].	aCanvas horizontalRule.! !AccessGrantingComponent subclass: #LoginComponent	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-UI'!!LoginComponent commentStamp: 'lautaro 5/6/2020 19:00' prior: 0!| application |application := WAAdmin register: LoginComponent asApplicationAt: 'login'.application sessionClass: SessionWithUser.!!LoginComponent methodsFor: 'callbacks' stamp: 'Casco 4/5/2020 10:42'!registerNewUser	self call: RegisterComponent new! !!LoginComponent methodsFor: 'callbacks' stamp: 'lautaro 5/6/2020 19:38'!login	(self model userWithNombre: name protectedBy: password)		ifNotNil: [ :it | self proceedWith: it ].	name := nil.	password := nil! !!LoginComponent methodsFor: 'rendering' stamp: 'Casco 4/5/2020 10:52'!renderSignUpButtonOn: aCanvas	aCanvas submitButton		callback: [ self registerNewUser ];		with: 'Sign Up, it''s free'! !!LoginComponent methodsFor: 'rendering' stamp: 'Casco 4/5/2020 10:53'!renderButtonsOn: aCanvas	self renderSignInButtonOn: aCanvas.	aCanvas horizontalRule.	aCanvas paragraph: 'Don''t have an account?'.	self renderSignUpButtonOn: aCanvas! !!LoginComponent methodsFor: 'rendering' stamp: 'Casco 4/5/2020 10:51'!renderSignInButtonOn: aCanvas	aCanvas submitButton		callback: [ self login ];		with: 'Sign In'! !!LoginComponent methodsFor: 'rendering' stamp: 'lautaro 5/6/2020 19:39'!renderContentOn: aCanvas	aCanvas heading: 'CuOOra '.	super renderContentOn: aCanvas.	! !HeaderComponent subclass: #NewQuestionComponent	instanceVariableNames: 'questionText questionTitle topicoActual topicosR'	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-UI'!!NewQuestionComponent methodsFor: 'accesing' stamp: 'FerminMoreno 4/10/2020 16:33'!questionText	^questionText ! !!NewQuestionComponent methodsFor: 'accesing' stamp: 'FerminMoreno 4/10/2020 16:33'!questionText: t	questionText := t.! !!NewQuestionComponent methodsFor: 'accesing' stamp: 'FerminMoreno 4/10/2020 16:34'!questionTitle: t	questionTitle := t.! !!NewQuestionComponent methodsFor: 'accesing' stamp: 'lautaro 4/12/2020 20:02'!questionTitle	^questionTitle! !!NewQuestionComponent methodsFor: 'initialization' stamp: 'lautaro 4/14/2020 19:36'!initialize 	topicosR := Set new.! !!NewQuestionComponent methodsFor: 'actions' stamp: 'lautaro 4/11/2020 20:48'!cancel 	questionText := nil.	questionTitle := nil.	self answer.! !!NewQuestionComponent methodsFor: 'model' stamp: 'lautaro 4/12/2020 19:26'!model	^Sistema soleInstance.! !!NewQuestionComponent methodsFor: 'rendering' stamp: 'lautaro 5/6/2020 19:41'!renderContentOn: aCanvas 	self renderHeaderOn: aCanvas.	aCanvas heading level:2; with: 'Agregar pregunta'.	aCanvas		form: [ aCanvas paragraph: 'Titulo'. 			(aCanvas textInput on: #questionTitle of: self).				aCanvas break.				aCanvas paragraph: 'Desarrollo'.					(aCanvas textArea on: #questionText of: self)				columns: 80;				rows: 5.			aCanvas break.			aCanvas select list: (self model topicos collect: [ :top | top nombre]); callback: [ :value | topicoActual := value].			aCanvas space.			aCanvas button callback: [ self addTopic ]; with: 'Agregar topico'.			aCanvas break.			aCanvas unorderedList: [ topicosR do: [ :top |				aCanvas listItem: top nombre] ].			aCanvas break.			aCanvas button callback: [ self create ]; with: 'Agregar'. 			aCanvas button callback: [ self cancel ]; with: 'Cancelar'].! !!NewQuestionComponent methodsFor: 'callbacks' stamp: 'lautaro 4/14/2020 19:43'!create	|preg|	questionText ifEmpty: [ ^ self ].	preg := Pregunta texto: questionText titulo: questionTitle usuario: (self session user) topicos: topicosR.	self model agregarPregunta: preg topicos: topicosR. 	self answer! !!NewQuestionComponent methodsFor: 'callbacks' stamp: 'lautaro 4/14/2020 19:36'!addTopic	|topico|	topico := (self model topicos) detect: [ :top | (top nombre) = topicoActual ].	topicosR add: topico.! !AccessGrantingComponent subclass: #RegisterComponent	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-UI'!!RegisterComponent methodsFor: 'rendering' stamp: 'lautaro 5/6/2020 19:40'!renderContentOn: aCanvas	super renderContentOn: aCanvas.! !!RegisterComponent methodsFor: 'rendering' stamp: 'Casco 4/5/2020 10:51'!renderSignUpButtonOn: aCanvas	aCanvas submitButton		callback: [ self registerAndLogin ];		with: 'Register'! !!RegisterComponent methodsFor: 'rendering' stamp: 'Casco 4/5/2020 10:51'!renderButtonsOn: aCanvas 	self renderSignUpButtonOn: aCanvas! !!RegisterComponent methodsFor: 'rendering' stamp: 'FerminMoreno 4/10/2020 14:38'!registerAndLogin	| theUser |	theUser := Usuario nombre: name contraseña: password. 	self model crearUsuario: theUser.	self proceedWith: theUser! !WASession subclass: #SessionWithUser	instanceVariableNames: 'user'	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-UI'!!SessionWithUser methodsFor: 'accessing' stamp: 'Casco 4/5/2020 11:23'!user: anObject	user := anObject! !!SessionWithUser methodsFor: 'accessing' stamp: 'Casco 4/5/2020 11:23'!user	^ user! !HeaderComponent subclass: #ShowQuestion	instanceVariableNames: 'question'	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-UI'!!ShowQuestion methodsFor: 'constructor' stamp: 'lautaro 5/6/2020 20:38'!open: preg	question:= preg.! !!ShowQuestion methodsFor: 'rendering' stamp: 'lautaro 5/7/2020 18:21'!renderShowQuestion: aCanvas aCanvas heading level:2; with: question titulo.			aCanvas paragraph: [question topicos do: [ :top | aCanvas text: top nombre. aCanvas space. aCanvas space.].].					aCanvas paragraph: question texto.			aCanvas text: 'Realizada por '.			aCanvas anchor callback: [ self openUser: (question usuario)]; with: (question usuario nombre).			aCanvas break. aCanvas break.			aCanvas text: question votosPositivos size. aCanvas text:' Likes | '. aCanvas text: question votosNegativos size. aCanvas text:' Dislikes'.			aCanvas break.			aCanvas anchor callback: [ question votarPositivo: self session user ];with: [ aCanvas button: 'Likes' ].			aCanvas anchor callback: [ question votarNegativo: self session user ];with: [ aCanvas button: 'Dislikes' ].					aCanvas horizontalRule.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ShowQuestion class	instanceVariableNames: ''!!ShowQuestion class methodsFor: 'constructor' stamp: 'lautaro 5/6/2020 20:30'!open: preg	^ self new open: preg.! !ShowQuestion subclass: #NewAnswerComponent	instanceVariableNames: 'answerText'	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-UI'!!NewAnswerComponent methodsFor: 'rendering' stamp: 'lautaro 5/6/2020 19:08'!renderContentOn: aCanvas	self renderHeaderOn: aCanvas.	self renderShowQuestion: aCanvas.	aCanvas text: 'Responder'.	aCanvas		form: [					(aCanvas textArea on: #answerText of: self)				columns: 80;				rows: 5.			aCanvas break.			aCanvas submitButton callback: [ self create ]; with: 'Guardar' .			aCanvas cancelButton callback:[ self cancel ]; with: 'Cancelar'.			]! !!NewAnswerComponent methodsFor: 'accessing' stamp: 'lautaro 5/6/2020 20:33'!create 	|resp|	answerText ifEmpty:[ ^self ].		resp:= (Respuesta texto: answerText  usuario: (self session user)).	question agregarRespuesta: resp.	self session user agregarRespuesta: resp.	self answer.	! !!NewAnswerComponent methodsFor: 'accessing' stamp: 'lautaro 4/11/2020 18:47'!answerText	^answerText ! !!NewAnswerComponent methodsFor: 'accessing' stamp: 'lautaro 4/11/2020 18:47'!answerText:t 	answerText := t.! !!NewAnswerComponent methodsFor: 'accessing' stamp: 'lautaro 4/11/2020 20:47'!cancel 	answerText:= nil.	self answer.! !ShowQuestion subclass: #NewOpenQuestionComponent	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-UI'!!NewOpenQuestionComponent methodsFor: 'callback' stamp: 'lautaro 5/6/2020 20:34'!createNewAnswer: q	self call: (NewAnswerComponent open: q). ! !!NewOpenQuestionComponent methodsFor: 'rendering' stamp: 'lautaro 5/7/2020 18:22'!renderAnswersOn: aCanvas 	aCanvas		unorderedList: [ (question respuestas) 			do: [ :each | 			aCanvas heading level:2; with: [aCanvas text:'Respuesta de '. aCanvas anchor callback: [ self openUser: (each usuario)]; with: (each usuario nombre)].			aCanvas text: each texto.			aCanvas break. aCanvas break.			aCanvas text: each votosPositivos size. aCanvas text:' Likes | '. aCanvas text: each votosNegativos size. aCanvas text:' Dislikes'.			aCanvas break.			aCanvas anchor callback: [ each votarPositivo: self session user ];with: [ aCanvas button: 'Likes' ].			aCanvas anchor callback: [ each votarNegativo: self session user ];with: [ aCanvas button: 'Dislikes' ].					aCanvas horizontalRule.		] ]. 	aCanvas paragraph: 'No hay mas respuestas'.	aCanvas anchor		callback: [ self createNewAnswer: question ];		with: [ aCanvas button: 'Agregar Respuesta' ]! !!NewOpenQuestionComponent methodsFor: 'rendering' stamp: 'lautaro 5/6/2020 20:45'!renderContentOn: aCanvas		self renderHeaderOn: aCanvas.		self renderShowQuestion: aCanvas. 		self renderAnswersOn: aCanvas.		aCanvas break.		aCanvas break.		aCanvas button: [ aCanvas anchor callback: [ self answer ]; with: 'Anterior' ].! !HeaderComponent subclass: #ShowQuestions	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-UI'!!ShowQuestions methodsFor: 'rendering' stamp: 'lautaro 5/6/2020 20:07'!openQuestion: preg    self call: (NewOpenQuestionComponent open:preg).! !!ShowQuestions methodsFor: 'rendering' stamp: 'lautaro 5/7/2020 18:22'!renderQuestionsOn: aCanvas preguntas: pregs	aCanvas        unorderedList: [ pregs				do: [ :each | aCanvas listItem: [            aCanvas anchor callback: [ self openQuestion: each ]; with: [ aCanvas heading level: 2; with: each titulo ].				each topicos do: [ :top | aCanvas text: top nombre. aCanvas space. aCanvas space.].				aCanvas break.            aCanvas text: 'Realizada por '. aCanvas anchor callback: [self openUser: each usuario]; with: [ aCanvas text: each usuario nombre ]. aCanvas text: ' | '.					aCanvas text: each respuestas size. aCanvas text:' respuestas'.				aCanvas break.            aCanvas text: each votosPositivos size. aCanvas text: ' Likes | '. aCanvas text: each votosNegativos size. aCanvas text: ' Dislikes'.				aCanvas break.            aCanvas anchor callback: [ each votarPositivo: self session user ];with: [ aCanvas button: 'Likes' ].            aCanvas anchor callback: [ each votarNegativo: self session user ];with: [ aCanvas button: 'Dislikes' ].				aCanvas horizontalRule.        ] ] ]. ! !ShowQuestions subclass: #HomeComponent	instanceVariableNames: 'pregs'	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-UI'!!HomeComponent commentStamp: 'lautaro 4/18/2020 18:30' prior: 0!|application top1 top2 top3 usu1 usu2 usu3 tops1 tops2 preg1 preg2 resp1 resp2|"Sistema clearSoleInstance."application:= WAAdmin register: LoginComponent asApplicationAt:'login'.application sessionClass: SessionWithUser.top1 := Topico nombre: 'OO1' descripcion: 'Orientacion a objetos'.top2 := Topico nombre: 'Test de unidad' descripcion: 'Test para comprobar si la unidad funciona'.top3 := Topico nombre: 'Smalltalk' descripcion: 'Lenguaje orientado a objetos'.Sistema soleInstance agregarTopico: top1.Sistema soleInstance agregarTopico: top2.Sistema soleInstance agregarTopico: top3.usu1 := Usuario nombre: 'pedro@cuoora.com' contraseña: 'pedro'.usu2 := Usuario nombre: 'diego@cuoora.com' contraseña: 'diego'.usu3 := Usuario nombre: 'juan@cuoora.com' contraseña: 'juan'.usu3 seguir: usu2. usu1 seguir: usu3.tops1:= Set new.tops1 add:top1. tops1 add:top2.tops2:= Set new.tops2 add:top1. tops2 add:top3.Sistema soleInstance crearUsuario: usu1.Sistema soleInstance crearUsuario: usu2.Sistema soleInstance crearUsuario: usu3.preg1:= Pregunta texto:'¿Para qué sirve el método SetUp?'  titulo: '¿Para qué sirve el método SetUp?' usuario: usu1 topicos: tops1.preg2:= Pregunta texto:'¿Qué significa #messageNotUnderstood?'  titulo: '¿Qué significa #messageNotUnderstood?' usuario: usu2 topicos: tops2.usu1 agregarPregunta: preg1.usu2 agregarPregunta: preg2.resp1:= Respuesta texto: 'Sirve para instanciar los objetos queson evaluados por el test en un único método y que seejecute siempre antes de cada test.' usuario: usu2.resp2:= Respuesta texto: 'Significa que el objeto que recibió elmensaje no encontró ningún método para ejecutar enrespuesta.' usuario: usu1.Sistema soleInstance agregarRespuesta: resp1 pregunta: preg1.Sistema soleInstance agregarRespuesta: resp2 pregunta: preg2.!!HomeComponent methodsFor: 'callbacks' stamp: 'FerminMoreno 4/10/2020 16:39'!createNewQuestion	self call: NewQuestionComponent new! !!HomeComponent methodsFor: 'rendering' stamp: 'lautaro 4/11/2020 18:16'!renderCreateQuestionOn: aCanvas	aCanvas break.	aCanvas anchor		callback: [ self createNewQuestion ];		with: [ aCanvas button: 'Nueva pregunta' ]! !!HomeComponent methodsFor: 'rendering' stamp: 'lautaro 5/6/2020 20:15'!renderContentOn: aCanvas	self renderHeaderOn: aCanvas.	self renderCreateQuestionOn: aCanvas.	aCanvas horizontalRule.	self showFiveQuestions.    aCanvas heading        level: 2;        with: 'Ultimas preguntas'. 	self renderQuestionsOn: aCanvas preguntas: pregs.! !!HomeComponent methodsFor: 'private protocol' stamp: 'lautaro 5/6/2020 19:48'!showFiveQuestions	pregs := self session user ordenar5PreguntasRelevantesPorFecha.! !ShowQuestions subclass: #NewOpenUserComponent	instanceVariableNames: 'userQuestion'	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-UI'!!NewOpenUserComponent methodsFor: 'constructor' stamp: 'lautaro 4/11/2020 19:37'!user: u	userQuestion := u.! !!NewOpenUserComponent methodsFor: 'rendering' stamp: 'lautaro 5/6/2020 20:12'!renderContentOn: aCanvas	self renderHeaderOn: aCanvas.	aCanvas heading		level: 2;		with: 'Preguntas de ',userQuestion nombre. 	self ifFollow: aCanvas.	self renderQuestionsOn: aCanvas preguntas: (userQuestion preguntas). 	aCanvas button: [ aCanvas anchor callback: [ self answer ]; with: 'Anterior' ].! !!NewOpenUserComponent methodsFor: 'callback' stamp: 'lautaro 4/11/2020 18:49'!follow	self session user seguir: userQuestion  ! !!NewOpenUserComponent methodsFor: 'callback' stamp: 'lautaro 4/18/2020 17:00'!ifFollow: aCanvas	aCanvas form:[	(self session user usuariosSeguidos includes: userQuestion)	ifTrue: [ aCanvas button callback: [ self unFollow ]; with: 'Siguiendo']	ifFalse:[ aCanvas button callback: [ self follow ]; with: 'Seguir'. ].].! !!NewOpenUserComponent methodsFor: 'callback' stamp: 'lautaro 4/18/2020 16:55'!unFollow	self session user dejarDeSeguir: userQuestion  ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!NewOpenUserComponent class	instanceVariableNames: ''!!NewOpenUserComponent class methodsFor: 'constructor' stamp: 'lautaro 4/11/2020 18:49'!user: u	^self new user: u.! !Object subclass: #Post	instanceVariableNames: 'usuario texto fecha vPositivos vNegativos'	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-Model'!!Post methodsFor: 'private' stamp: 'lautaro 5/7/2020 17:09'!eliminarVotoP: usu	|voto|	voto := vPositivos detect: [ :votoP | votoP usuario = usu ].	vPositivos remove: voto.	! !!Post methodsFor: 'private' stamp: 'lautaro 5/7/2020 17:09'!eliminarVotoN: usu	|voto|	voto := vNegativos detect: [ :votoN | votoN usuario = usu ].	vNegativos remove: voto.! !!Post methodsFor: 'public' stamp: 'lautaro 5/7/2020 18:20'!diferenciaVotos	^(vPositivos size - vNegativos size).! !!Post methodsFor: 'public' stamp: 'lautaro 5/7/2020 18:16'!votosPositivos	^vPositivos.! !!Post methodsFor: 'public' stamp: 'lautaro 5/7/2020 18:16'!votosNegativos	^vNegativos.! !!Post methodsFor: 'public' stamp: 'lautaro 5/7/2020 17:10'!votarPositivo: usu	|usuQueVotoN|	vPositivos detect: [ :each | each usuario = usu ]	ifNone: [ vPositivos add: (Voto new usuario: usu). ].	usuQueVotoN := vNegativos select: [ :each | each usuario = usu ].	usuQueVotoN size = 1	ifTrue: [ self eliminarVotoN: usu. ].  	! !!Post methodsFor: 'public' stamp: 'Lautaro 4/9/2020 17:17'!usuario 	^usuario.! !!Post methodsFor: 'public' stamp: 'lautaro 4/10/2020 21:55'!texto	^texto.! !!Post methodsFor: 'public' stamp: 'lautaro 5/7/2020 18:19'!texto: text usuario: usu	texto := text.	usuario := usu.	vPositivos := OrderedCollection new.	vNegativos := OrderedCollection new.	fecha := DateAndTime now.		! !!Post methodsFor: 'public' stamp: 'lautaro 5/7/2020 17:10'!votarNegativo: usu	|usuQueVotoP|	vNegativos detect: [ :each | each usuario = usu ]	ifNone: [ vNegativos add: (Voto new usuario: usu). ].	usuQueVotoP := vPositivos select: [ :each | each usuario = usu ].	usuQueVotoP size = 1	ifTrue: [ self eliminarVotoP: usu. ].! !!Post methodsFor: 'public' stamp: 'lautaro 4/12/2020 16:01'!fecha	^fecha.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Post class	instanceVariableNames: ''!!Post class methodsFor: 'initialize' stamp: 'lautaro 5/7/2020 19:36'!texto: text usuario: usu	^self new texto: text usuario: usu; yourself.  ! !Post subclass: #Pregunta	instanceVariableNames: 'titulo respuestas topicos'	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-Model'!!Pregunta methodsFor: 'public' stamp: 'lautaro 5/7/2020 17:10'!agregarRespuesta: res	respuestas add: res.! !!Pregunta methodsFor: 'public' stamp: 'Lautaro 4/8/2020 17:55'!borrarRespuestas	respuestas removeAll.! !!Pregunta methodsFor: 'public' stamp: 'Lautaro 3/26/2020 19:57'!respuestas	^respuestas.! !!Pregunta methodsFor: 'public' stamp: 'lautaro 4/11/2020 17:19'!titulo	^titulo.! !!Pregunta methodsFor: 'public' stamp: 'lautaro 4/12/2020 19:45'!topicos 	^topicos.! !!Pregunta methodsFor: 'public' stamp: 'lautaro 5/7/2020 17:19'!respuestasOrdenadas	^respuestas sorted: [ :each1 : each2 | each1 diferenciaVotos >= each2 diferenciaVotos ].! !!Pregunta methodsFor: 'public' stamp: 'lautaro 5/7/2020 17:12'!texto: text titulo: tit usuario: usu topicos: topic	super texto: tit usuario: usu.	respuestas := OrderedCollection new.	topicos := topic.	titulo := tit.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Pregunta class	instanceVariableNames: ''!!Pregunta class methodsFor: 'initialize' stamp: 'lautaro 5/7/2020 17:27'!texto: text titulo: tit usuario: usu topicos: topic	^ self new texto: text titulo: tit usuario: usu topicos: topic; yourself.! !Post subclass: #Respuesta	instanceVariableNames: 'pregunta'	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-Model'!!Respuesta methodsFor: 'public' stamp: 'lautaro 5/7/2020 19:57'!texto: text usuario: usu pregunta: preg	super texto: text usuario: usu.	pregunta := preg.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Respuesta class	instanceVariableNames: ''!!Respuesta class methodsFor: 'initialize' stamp: 'lautaro 5/7/2020 19:58'!texto: text usuario: usu pregunta: preg	^self new texto: text usuario: usu pregunta: preg; yourself.! !Object subclass: #Sistema	instanceVariableNames: 'topicos usuarios'	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-Model'!!Sistema methodsFor: 'public' stamp: 'Lautaro 4/8/2020 16:24'!topicos 	^topicos.! !!Sistema methodsFor: 'public' stamp: 'lautaro 5/6/2020 19:37'!userWithNombre: nombre protectedBy: contraseña	^self usuarios detect: [ :usuario | (usuario nombre = nombre) & (usuario contraseña = contraseña) ] ifNone: [ ^nil ]. ! !!Sistema methodsFor: 'public' stamp: 'lautaro 5/7/2020 17:14'!agregarRespuesta: res pregunta: preg	preg agregarRespuesta: res.	res usuario agregarRespuesta: res.! !!Sistema methodsFor: 'public' stamp: 'lautaro 5/7/2020 18:26'!preguntasPorTopico: topic	^topic preguntas. ! !!Sistema methodsFor: 'public' stamp: 'lautaro 5/7/2020 17:14'!borrarPregunta: preg	|topicosElegidos usuarioElegido|	preg respuestas do: [ :res | (res usuario) borrarRespuesta: res ].	preg respuestas removeAll.	topicosElegidos := topicos select: [ :topico | topico preguntas includes: preg].	usuarioElegido := usuarios detect: [ :usuario | (usuario preguntas) includes: preg].	usuarioElegido borrarPregunta: preg.	topicosElegidos do: [ :topico | topico borrarPregunta: preg ].! !!Sistema methodsFor: 'public' stamp: 'Lautaro 4/7/2020 20:57'!usuarios	^usuarios.! !!Sistema methodsFor: 'public' stamp: 'lautaro 5/7/2020 17:13'!agregarPregunta: preg topicos: topic	topic do: [ :each | each agregarPregunta: preg ]. 	preg usuario agregarPregunta: preg.! !!Sistema methodsFor: 'public' stamp: 'lautaro 5/7/2020 17:16'!crearUsuario: usu	usuarios add: usu.! !!Sistema methodsFor: 'public' stamp: 'lautaro 5/7/2020 17:14'!agregarTopico: topic	topicos add: topic.! !!Sistema methodsFor: 'initialization' stamp: 'lautaro 4/14/2020 19:42'!initialize	topicos := Set new.	usuarios := OrderedCollection new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Sistema class	instanceVariableNames: 'soleInstance'!!Sistema class methodsFor: 'instance creation' stamp: 'lautaro 4/10/2020 20:29'!soleInstance    soleInstance ifNil: [ soleInstance := self new ]. ^soleInstance.! !!Sistema class methodsFor: 'instance creation' stamp: 'lautaro 4/11/2020 19:04'!clearSoleInstance    soleInstance := nil. ! !Object subclass: #Topico	instanceVariableNames: 'nombre descripcion preguntas'	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-Model'!!Topico methodsFor: 'public' stamp: 'Lautaro 4/9/2020 16:05'!preguntas	^preguntas.! !!Topico methodsFor: 'public' stamp: 'lautaro 5/7/2020 17:24'!nombre: nom descripcion: des	nombre := nom.	descripcion := des.	preguntas := OrderedCollection new.! !!Topico methodsFor: 'public' stamp: 'lautaro 4/10/2020 23:36'!nombre	^nombre.! !!Topico methodsFor: 'public' stamp: 'lautaro 5/7/2020 17:24'!agregarPregunta: preg	preguntas add: preg.! !!Topico methodsFor: 'public' stamp: 'lautaro 5/7/2020 17:24'!borrarPregunta: preg	preg borrarRespuestas.	preguntas remove: preg.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Topico class	instanceVariableNames: ''!!Topico class methodsFor: 'initialize' stamp: 'lautaro 5/7/2020 17:27'!nombre: nom descripcion: des	^ self new nombre: nom descripcion: des; yourself. ! !Object subclass: #Usuario	instanceVariableNames: 'nombre contraseña fecha respuestas preguntas topicos siguiendo'	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-Model'!!Usuario methodsFor: 'accessing' stamp: 'Lautaro 3/26/2020 20:08'!respuestas	^respuestas.! !!Usuario methodsFor: 'private protocol' stamp: 'lautaro 5/6/2020 19:47'!ordenar5PreguntasRelevantesPorFecha 	|pregs|	pregs := self preguntasRelevantes asSortedCollection: [ :preg1 :preg2 | preg1 fecha < preg2 fecha].	pregs := pregs copyFrom: 1 to: (pregs size min: 5).	^pregs.! !!Usuario methodsFor: 'public' stamp: 'lautaro 5/7/2020 17:25'!dejarDeSeguir: usu	|usuario|	usuario := self usuariosSeguidos detect:[ :usua | usua = usu].	self usuariosSeguidos remove: usuario.! !!Usuario methodsFor: 'public' stamp: 'Lautaro 3/26/2020 20:07'!topicos	^topicos.! !!Usuario methodsFor: 'public' stamp: 'Lautaro 4/8/2020 22:46'!pregUsuariosSeguidos	|preg|	preg := OrderedCollection new.	siguiendo do: [ :usuario | (usuario preguntas do: [ :pregunta | preg add: pregunta ]) ].	^preg.! !!Usuario methodsFor: 'public' stamp: 'lautaro 4/10/2020 20:23'!nombre	^nombre.! !!Usuario methodsFor: 'public' stamp: 'Lautaro 3/26/2020 20:07'!usuariosSeguidos	^siguiendo.! !!Usuario methodsFor: 'public' stamp: 'lautaro 4/10/2020 20:23'!contraseña	^contraseña.! !!Usuario methodsFor: 'public' stamp: 'lautaro 5/7/2020 17:25'!agregarTopicoInteres: topic	topicos add: topic.! !!Usuario methodsFor: 'public' stamp: 'lautaro 5/7/2020 17:26'!nombre: nom contraseña: con	nombre := nom.	contraseña := con.	fecha := DateAndTime now.	respuestas := OrderedCollection new.	preguntas := OrderedCollection new.	topicos := OrderedCollection new.	siguiendo := OrderedCollection new.! !!Usuario methodsFor: 'public' stamp: 'Lautaro 3/26/2020 20:08'!preguntas	^preguntas.! !!Usuario methodsFor: 'public' stamp: 'Lautaro 4/9/2020 16:10'!preguntasDeInteres	|preg|	preg := OrderedCollection new.	topicos do: [ :topico | (topico preguntas do: [ :pregunta | preg add: pregunta ]) ].	^preg.	! !!Usuario methodsFor: 'public' stamp: 'lautaro 5/6/2020 22:34'!borrarRespuesta: res	respuestas remove: res.! !!Usuario methodsFor: 'public' stamp: 'lautaro 5/7/2020 17:26'!seguir: usu	siguiendo add: usu.! !!Usuario methodsFor: 'public' stamp: 'lautaro 5/7/2020 18:36'!puntaje	|diferenciaP diferenciaR|	diferenciaP := self preguntas sumNumbers: [ :preg | preg diferenciaVotos ].	diferenciaR := self respuestas sumNumbers: [ :res | res diferenciaVotos ].	^ ( (self preguntas size * 20) + (self respuestas size * 50) + diferenciaP + diferenciaR ).! !!Usuario methodsFor: 'public' stamp: 'lautaro 5/7/2020 17:25'!agregarRespuesta: res 	respuestas add: res.! !!Usuario methodsFor: 'public' stamp: 'lautaro 5/7/2020 17:25'!borrarPregunta: preg	preguntas remove: preg.! !!Usuario methodsFor: 'public' stamp: 'lautaro 4/18/2020 17:38'!preguntasRelevantes	|pregInteres pregSeguidos|	pregInteres := (self preguntasDeInteres).	pregSeguidos := (self pregUsuariosSeguidos).	pregInteres do: [ :pregunta | pregSeguidos add: pregunta ]. 	^pregSeguidos asSet.! !!Usuario methodsFor: 'public' stamp: 'lautaro 5/7/2020 17:24'!agregarPregunta: preg	preguntas add: preg.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Usuario class	instanceVariableNames: ''!!Usuario class methodsFor: 'public' stamp: 'lautaro 5/7/2020 17:26'!nombre: nom contraseña: con	^ self new nombre: nom contraseña: con; yourself. ! !Object subclass: #Voto	instanceVariableNames: 'usuario fecha'	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-Model'!!Voto methodsFor: 'public' stamp: 'lautaro 5/7/2020 17:26'!usuario: usu	usuario := usu.	fecha := DateAndTime now.! !!Voto methodsFor: 'public' stamp: 'Lautaro 3/26/2020 19:11'!usuario	^usuario.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Voto class	instanceVariableNames: ''!!Voto class methodsFor: 'initialize' stamp: 'lautaro 5/7/2020 17:26'!usuario: usu	^ self new usuario: usu; yourself.! !